// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class LightningToolkit {
  /// Register a new node in the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> registerNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta;

  /// Recover an existing node from the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> recoverNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta;

  /// init_node initialized the global NodeService, schedule the node to run in the cloud and
  /// run the signer. This must be called in order to start comunicate with the node
  ///
  /// # Arguments
  ///
  /// * `config` - The sdk configuration
  /// * `seed` - The node private key
  /// * `creds` - The greenlight credentials
  ///
  Future<void> initNode(
      {Config? config,
      required Uint8List seed,
      required GreenlightCredentials creds,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitNodeConstMeta;

  /// Cleanup node resources and stop the signer.
  Future<void> stopNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta;

  /// pay a bolt11 invoice
  ///
  /// # Arguments
  ///
  /// * `bolt11` - The bolt11 invoice
  Future<void> sendPayment({required String bolt11, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta;

  /// pay directly to a node id using keysend
  ///
  /// # Arguments
  ///
  /// * `node_id` - The destination node_id
  /// * `amount_sats` - The amount to pay in satoshis
  Future<void> sendSpontaneousPayment(
      {required String nodeId, required int amountSats, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta;

  /// Creates an bolt11 payment request.
  /// This also works when the node doesn't have any channels and need inbound liquidity.
  /// In such case when the invoice is paid a new zero-conf channel will be open by the LSP,
  /// providing inbound liquidity and the payment will be routed via this new channel.
  ///
  /// # Arguments
  ///
  /// * `description` - The bolt11 payment request description
  /// * `amount_sats` - The amount to receive in satoshis
  Future<LNInvoice> receivePayment(
      {required int amountSats, required String description, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta;

  /// get the node state from the persistent storage
  Future<NodeState?> getNodeState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNodeStateConstMeta;

  /// list transactions (incoming/outgoing payments) from the persistent storage
  Future<List<LightningTransaction>> listTransactions(
      {required PaymentTypeFilter filter,
      int? fromTimestamp,
      int? toTimestamp,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListTransactionsConstMeta;

  /// List available lsps that can be selected by the user
  Future<List<LspInformation>> listLsps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta;

  /// Select the lsp to be used and provide inbound liquidity
  Future<void> setLspId({required String lspId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetLspIdConstMeta;

  /// Fetch live rates of fiat currencies
  Future<List<Rate>> fetchRates({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchRatesConstMeta;

  /// List all available fiat currencies
  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta;

  /// close all channels with the current lsp
  Future<void> closeLspChannels({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta;

  /// Withdraw on-chain funds in the wallet to an external btc address
  Future<void> withdraw(
      {required String toAddress,
      required FeeratePreset feeratePreset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithdrawConstMeta;

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta;

  /// Attempts to convert the phrase to a mnemonic, then to a seed.
  ///
  /// If the phrase is not a valid mnemonic, an error is returned.
  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta;
}

class Config {
  final String breezserver;
  final String mempoolspaceUrl;
  final String workingDir;
  final Network network;
  final int paymentTimeoutSec;

  Config({
    required this.breezserver,
    required this.mempoolspaceUrl,
    required this.workingDir,
    required this.network,
    required this.paymentTimeoutSec,
  });
}

class CurrencyInfo {
  final String name;
  final int fractionSize;
  final int? spacing;
  final Symbol? symbol;
  final Symbol? uniqSymbol;
  final List<LocalizedName>? localizedName;
  final List<LocaleOverrides>? localeOverrides;

  CurrencyInfo({
    required this.name,
    required this.fractionSize,
    this.spacing,
    this.symbol,
    this.uniqSymbol,
    this.localizedName,
    this.localeOverrides,
  });
}

enum FeeratePreset {
  Regular,
  Economy,
  Priority,
}

class FiatCurrency {
  final String id;
  final CurrencyInfo info;

  FiatCurrency({
    required this.id,
    required this.info,
  });
}

class GreenlightCredentials {
  final Uint8List deviceKey;
  final Uint8List deviceCert;

  GreenlightCredentials({
    required this.deviceKey,
    required this.deviceCert,
  });
}

class LightningTransaction {
  final String paymentType;
  final String paymentHash;
  final int paymentTime;
  final String label;
  final String destinationPubkey;
  final int amountMsat;
  final int feesMsat;
  final String paymentPreimage;
  final bool keysend;
  final String bolt11;
  final bool pending;
  final String? description;

  LightningTransaction({
    required this.paymentType,
    required this.paymentHash,
    required this.paymentTime,
    required this.label,
    required this.destinationPubkey,
    required this.amountMsat,
    required this.feesMsat,
    required this.paymentPreimage,
    required this.keysend,
    required this.bolt11,
    required this.pending,
    this.description,
  });
}

class LNInvoice {
  final String bolt11;
  final String payeePubkey;
  final String paymentHash;
  final String description;
  final int? amountMsat;
  final int timestamp;
  final int expiry;
  final List<RouteHint> routingHints;
  final Uint8List paymentSecret;

  LNInvoice({
    required this.bolt11,
    required this.payeePubkey,
    required this.paymentHash,
    required this.description,
    this.amountMsat,
    required this.timestamp,
    required this.expiry,
    required this.routingHints,
    required this.paymentSecret,
  });
}

class LocaleOverrides {
  final String locale;
  final int? spacing;
  final Symbol symbol;

  LocaleOverrides({
    required this.locale,
    this.spacing,
    required this.symbol,
  });
}

class LocalizedName {
  final String locale;
  final String name;

  LocalizedName({
    required this.locale,
    required this.name,
  });
}

class LspInformation {
  final String id;
  final String name;
  final String widgetUrl;
  final String pubkey;
  final String host;
  final int channelCapacity;
  final int targetConf;
  final int baseFeeMsat;
  final double feeRate;
  final int timeLockDelta;
  final int minHtlcMsat;
  final int channelFeePermyriad;
  final Uint8List lspPubkey;
  final int maxInactiveDuration;
  final int channelMinimumFeeMsat;

  LspInformation({
    required this.id,
    required this.name,
    required this.widgetUrl,
    required this.pubkey,
    required this.host,
    required this.channelCapacity,
    required this.targetConf,
    required this.baseFeeMsat,
    required this.feeRate,
    required this.timeLockDelta,
    required this.minHtlcMsat,
    required this.channelFeePermyriad,
    required this.lspPubkey,
    required this.maxInactiveDuration,
    required this.channelMinimumFeeMsat,
  });
}

enum Network {
  /// Mainnet
  Bitcoin,
  Testnet,
  Signet,
  Regtest,
}

class NodeState {
  final String id;
  final int blockHeight;
  final int channelsBalanceMsat;
  final int onchainBalanceMsat;
  final int maxPayableMsat;
  final int maxReceivableMsat;
  final int maxSinglePaymentAmountMsat;
  final int maxChanReserveMsats;
  final List<String> connectedPeers;
  final int inboundLiquidityMsats;

  NodeState({
    required this.id,
    required this.blockHeight,
    required this.channelsBalanceMsat,
    required this.onchainBalanceMsat,
    required this.maxPayableMsat,
    required this.maxReceivableMsat,
    required this.maxSinglePaymentAmountMsat,
    required this.maxChanReserveMsats,
    required this.connectedPeers,
    required this.inboundLiquidityMsats,
  });
}

enum PaymentTypeFilter {
  Sent,
  Received,
  All,
}

class Rate {
  final String coin;
  final double value;

  Rate({
    required this.coin,
    required this.value,
  });
}

class RouteHint {
  final List<RouteHintHop> field0;

  RouteHint({
    required this.field0,
  });
}

class RouteHintHop {
  /// The node_id of the non-target end of the route
  final String srcNodeId;

  /// The short_channel_id of this channel
  final int shortChannelId;

  /// The fees which must be paid to use this channel
  final int feesBaseMsat;
  final int feesProportionalMillionths;

  /// The difference in CLTV values between this node and the next node.
  final int cltvExpiryDelta;

  /// The minimum value, in msat, which must be relayed to the next hop.
  final int? htlcMinimumMsat;

  /// The maximum value in msat available for routing with a single HTLC.
  final int? htlcMaximumMsat;

  RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });
}

class Symbol {
  final String? grapheme;
  final String? template;
  final bool? rtl;
  final int? position;

  Symbol({
    this.grapheme,
    this.template,
    this.rtl,
    this.position,
  });
}

class LightningToolkitImpl implements LightningToolkit {
  final LightningToolkitPlatform _platform;
  factory LightningToolkitImpl(ExternalLibrary dylib) =>
      LightningToolkitImpl.raw(LightningToolkitPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LightningToolkitImpl.wasm(FutureOr<WasmModule> module) =>
      LightningToolkitImpl(module as ExternalLibrary);
  LightningToolkitImpl.raw(this._platform);
  Future<GreenlightCredentials> registerNode(
          {required Network network,
          required Uint8List seed,
          Config? config,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_register_node(
            port_,
            api2wire_network(network),
            _platform.api2wire_uint_8_list(seed),
            _platform.api2wire_opt_box_autoadd_config(config)),
        parseSuccessData: _wire2api_greenlight_credentials,
        constMeta: kRegisterNodeConstMeta,
        argValues: [network, seed, config],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_node",
        argNames: ["network", "seed", "config"],
      );

  Future<GreenlightCredentials> recoverNode(
          {required Network network,
          required Uint8List seed,
          Config? config,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_recover_node(
            port_,
            api2wire_network(network),
            _platform.api2wire_uint_8_list(seed),
            _platform.api2wire_opt_box_autoadd_config(config)),
        parseSuccessData: _wire2api_greenlight_credentials,
        constMeta: kRecoverNodeConstMeta,
        argValues: [network, seed, config],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "recover_node",
        argNames: ["network", "seed", "config"],
      );

  Future<void> initNode(
          {Config? config,
          required Uint8List seed,
          required GreenlightCredentials creds,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_init_node(
            port_,
            _platform.api2wire_opt_box_autoadd_config(config),
            _platform.api2wire_uint_8_list(seed),
            _platform.api2wire_box_autoadd_greenlight_credentials(creds)),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitNodeConstMeta,
        argValues: [config, seed, creds],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_node",
        argNames: ["config", "seed", "creds"],
      );

  Future<void> stopNode({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_stop_node(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kStopNodeConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_node",
        argNames: [],
      );

  Future<void> sendPayment({required String bolt11, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_send_payment(port_, _platform.api2wire_String(bolt11)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSendPaymentConstMeta,
        argValues: [bolt11],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment",
        argNames: ["bolt11"],
      );

  Future<void> sendSpontaneousPayment(
          {required String nodeId, required int amountSats, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_send_spontaneous_payment(
            port_,
            _platform.api2wire_String(nodeId),
            _platform.api2wire_u64(amountSats)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSendSpontaneousPaymentConstMeta,
        argValues: [nodeId, amountSats],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_spontaneous_payment",
        argNames: ["nodeId", "amountSats"],
      );

  Future<LNInvoice> receivePayment(
          {required int amountSats,
          required String description,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_receive_payment(
            port_,
            _platform.api2wire_u64(amountSats),
            _platform.api2wire_String(description)),
        parseSuccessData: _wire2api_ln_invoice,
        constMeta: kReceivePaymentConstMeta,
        argValues: [amountSats, description],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment",
        argNames: ["amountSats", "description"],
      );

  Future<NodeState?> getNodeState({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_node_state(port_),
        parseSuccessData: _wire2api_opt_box_autoadd_node_state,
        constMeta: kGetNodeStateConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetNodeStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_node_state",
        argNames: [],
      );

  Future<List<LightningTransaction>> listTransactions(
          {required PaymentTypeFilter filter,
          int? fromTimestamp,
          int? toTimestamp,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_list_transactions(
            port_,
            api2wire_payment_type_filter(filter),
            _platform.api2wire_opt_box_autoadd_i64(fromTimestamp),
            _platform.api2wire_opt_box_autoadd_i64(toTimestamp)),
        parseSuccessData: _wire2api_list_lightning_transaction,
        constMeta: kListTransactionsConstMeta,
        argValues: [filter, fromTimestamp, toTimestamp],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListTransactionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_transactions",
        argNames: ["filter", "fromTimestamp", "toTimestamp"],
      );

  Future<List<LspInformation>> listLsps({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_list_lsps(port_),
        parseSuccessData: _wire2api_list_lsp_information,
        constMeta: kListLspsConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_lsps",
        argNames: [],
      );

  Future<void> setLspId({required String lspId, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_set_lsp_id(port_, _platform.api2wire_String(lspId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSetLspIdConstMeta,
        argValues: [lspId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSetLspIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_lsp_id",
        argNames: ["lspId"],
      );

  Future<List<Rate>> fetchRates({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_fetch_rates(port_),
        parseSuccessData: _wire2api_list_rate,
        constMeta: kFetchRatesConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFetchRatesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_rates",
        argNames: [],
      );

  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_list_fiat_currencies(port_),
        parseSuccessData: _wire2api_list_fiat_currency,
        constMeta: kListFiatCurrenciesConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_fiat_currencies",
        argNames: [],
      );

  Future<void> closeLspChannels({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_close_lsp_channels(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kCloseLspChannelsConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "close_lsp_channels",
        argNames: [],
      );

  Future<void> withdraw(
          {required String toAddress,
          required FeeratePreset feeratePreset,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_withdraw(
            port_,
            _platform.api2wire_String(toAddress),
            api2wire_feerate_preset(feeratePreset)),
        parseSuccessData: _wire2api_unit,
        constMeta: kWithdrawConstMeta,
        argValues: [toAddress, feeratePreset],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kWithdrawConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "withdraw",
        argNames: ["toAddress", "feeratePreset"],
      );

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_parse_invoice(port_, _platform.api2wire_String(invoice)),
        parseSuccessData: _wire2api_ln_invoice,
        constMeta: kParseInvoiceConstMeta,
        argValues: [invoice],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_invoice",
        argNames: ["invoice"],
      );

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_mnemonic_to_seed(port_, _platform.api2wire_String(phrase)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kMnemonicToSeedConstMeta,
        argValues: [phrase],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_to_seed",
        argNames: ["phrase"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  NodeState _wire2api_box_autoadd_node_state(dynamic raw) {
    return _wire2api_node_state(raw);
  }

  Symbol _wire2api_box_autoadd_symbol(dynamic raw) {
    return _wire2api_symbol(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  CurrencyInfo _wire2api_currency_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CurrencyInfo(
      name: _wire2api_String(arr[0]),
      fractionSize: _wire2api_u32(arr[1]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[2]),
      symbol: _wire2api_opt_box_autoadd_symbol(arr[3]),
      uniqSymbol: _wire2api_opt_box_autoadd_symbol(arr[4]),
      localizedName: _wire2api_opt_list_localized_name(arr[5]),
      localeOverrides: _wire2api_opt_list_locale_overrides(arr[6]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FiatCurrency _wire2api_fiat_currency(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatCurrency(
      id: _wire2api_String(arr[0]),
      info: _wire2api_currency_info(arr[1]),
    );
  }

  GreenlightCredentials _wire2api_greenlight_credentials(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GreenlightCredentials(
      deviceKey: _wire2api_uint_8_list(arr[0]),
      deviceCert: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  LightningTransaction _wire2api_lightning_transaction(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return LightningTransaction(
      paymentType: _wire2api_String(arr[0]),
      paymentHash: _wire2api_String(arr[1]),
      paymentTime: _wire2api_i64(arr[2]),
      label: _wire2api_String(arr[3]),
      destinationPubkey: _wire2api_String(arr[4]),
      amountMsat: _wire2api_i32(arr[5]),
      feesMsat: _wire2api_i32(arr[6]),
      paymentPreimage: _wire2api_String(arr[7]),
      keysend: _wire2api_bool(arr[8]),
      bolt11: _wire2api_String(arr[9]),
      pending: _wire2api_bool(arr[10]),
      description: _wire2api_opt_String(arr[11]),
    );
  }

  List<FiatCurrency> _wire2api_list_fiat_currency(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_fiat_currency).toList();
  }

  List<LightningTransaction> _wire2api_list_lightning_transaction(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_lightning_transaction).toList();
  }

  List<LocaleOverrides> _wire2api_list_locale_overrides(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_locale_overrides).toList();
  }

  List<LocalizedName> _wire2api_list_localized_name(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_localized_name).toList();
  }

  List<LspInformation> _wire2api_list_lsp_information(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_lsp_information).toList();
  }

  List<Rate> _wire2api_list_rate(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_rate).toList();
  }

  List<RouteHint> _wire2api_list_route_hint(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint).toList();
  }

  List<RouteHintHop> _wire2api_list_route_hint_hop(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint_hop).toList();
  }

  LNInvoice _wire2api_ln_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return LNInvoice(
      bolt11: _wire2api_String(arr[0]),
      payeePubkey: _wire2api_String(arr[1]),
      paymentHash: _wire2api_String(arr[2]),
      description: _wire2api_String(arr[3]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[4]),
      timestamp: _wire2api_u64(arr[5]),
      expiry: _wire2api_u64(arr[6]),
      routingHints: _wire2api_list_route_hint(arr[7]),
      paymentSecret: _wire2api_uint_8_list(arr[8]),
    );
  }

  LocaleOverrides _wire2api_locale_overrides(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocaleOverrides(
      locale: _wire2api_String(arr[0]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[1]),
      symbol: _wire2api_symbol(arr[2]),
    );
  }

  LocalizedName _wire2api_localized_name(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedName(
      locale: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  LspInformation _wire2api_lsp_information(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return LspInformation(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      widgetUrl: _wire2api_String(arr[2]),
      pubkey: _wire2api_String(arr[3]),
      host: _wire2api_String(arr[4]),
      channelCapacity: _wire2api_i64(arr[5]),
      targetConf: _wire2api_i32(arr[6]),
      baseFeeMsat: _wire2api_i64(arr[7]),
      feeRate: _wire2api_f64(arr[8]),
      timeLockDelta: _wire2api_u32(arr[9]),
      minHtlcMsat: _wire2api_i64(arr[10]),
      channelFeePermyriad: _wire2api_i64(arr[11]),
      lspPubkey: _wire2api_uint_8_list(arr[12]),
      maxInactiveDuration: _wire2api_i64(arr[13]),
      channelMinimumFeeMsat: _wire2api_i64(arr[14]),
    );
  }

  NodeState _wire2api_node_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return NodeState(
      id: _wire2api_String(arr[0]),
      blockHeight: _wire2api_u32(arr[1]),
      channelsBalanceMsat: _wire2api_u64(arr[2]),
      onchainBalanceMsat: _wire2api_u64(arr[3]),
      maxPayableMsat: _wire2api_u64(arr[4]),
      maxReceivableMsat: _wire2api_u64(arr[5]),
      maxSinglePaymentAmountMsat: _wire2api_u64(arr[6]),
      maxChanReserveMsats: _wire2api_u64(arr[7]),
      connectedPeers: _wire2api_StringList(arr[8]),
      inboundLiquidityMsats: _wire2api_u64(arr[9]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  NodeState? _wire2api_opt_box_autoadd_node_state(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_node_state(raw);
  }

  Symbol? _wire2api_opt_box_autoadd_symbol(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_symbol(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  List<LocaleOverrides>? _wire2api_opt_list_locale_overrides(dynamic raw) {
    return raw == null ? null : _wire2api_list_locale_overrides(raw);
  }

  List<LocalizedName>? _wire2api_opt_list_localized_name(dynamic raw) {
    return raw == null ? null : _wire2api_list_localized_name(raw);
  }

  Rate _wire2api_rate(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Rate(
      coin: _wire2api_String(arr[0]),
      value: _wire2api_f64(arr[1]),
    );
  }

  RouteHint _wire2api_route_hint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RouteHint(
      field0: _wire2api_list_route_hint_hop(arr[0]),
    );
  }

  RouteHintHop _wire2api_route_hint_hop(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return RouteHintHop(
      srcNodeId: _wire2api_String(arr[0]),
      shortChannelId: _wire2api_u64(arr[1]),
      feesBaseMsat: _wire2api_u32(arr[2]),
      feesProportionalMillionths: _wire2api_u32(arr[3]),
      cltvExpiryDelta: _wire2api_u64(arr[4]),
      htlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      htlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
    );
  }

  Symbol _wire2api_symbol(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Symbol(
      grapheme: _wire2api_opt_String(arr[0]),
      template: _wire2api_opt_String(arr[1]),
      rtl: _wire2api_opt_box_autoadd_bool(arr[2]),
      position: _wire2api_opt_box_autoadd_u32(arr[3]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_feerate_preset(FeeratePreset raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_type_filter(PaymentTypeFilter raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class LightningToolkitPlatform
    extends FlutterRustBridgeBase<LightningToolkitWire> {
  LightningToolkitPlatform(ffi.DynamicLibrary dylib)
      : super(LightningToolkitWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials>
      api2wire_box_autoadd_greenlight_credentials(GreenlightCredentials raw) {
    final ptr = inner.new_box_autoadd_greenlight_credentials_0();
    _api_fill_to_wire_greenlight_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_opt_box_autoadd_config(Config? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_config(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials apiObj,
      ffi.Pointer<wire_GreenlightCredentials> wireObj) {
    _api_fill_to_wire_greenlight_credentials(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.breezserver = api2wire_String(apiObj.breezserver);
    wireObj.mempoolspace_url = api2wire_String(apiObj.mempoolspaceUrl);
    wireObj.working_dir = api2wire_String(apiObj.workingDir);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.payment_timeout_sec = api2wire_u32(apiObj.paymentTimeoutSec);
  }

  void _api_fill_to_wire_greenlight_credentials(
      GreenlightCredentials apiObj, wire_GreenlightCredentials wireObj) {
    wireObj.device_key = api2wire_uint_8_list(apiObj.deviceKey);
    wireObj.device_cert = api2wire_uint_8_list(apiObj.deviceCert);
  }

  void _api_fill_to_wire_opt_box_autoadd_config(
      Config? apiObj, ffi.Pointer<wire_Config> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_config(apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LightningToolkitWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningToolkitWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningToolkitWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_register_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
  ) {
    return _wire_register_node(
      port_,
      network,
      seed,
      config,
    );
  }

  late final _wire_register_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_register_node');
  late final _wire_register_node = _wire_register_nodePtr.asFunction<
      void Function(
          int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_recover_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
  ) {
    return _wire_recover_node(
      port_,
      network,
      seed,
      config,
    );
  }

  late final _wire_recover_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_recover_node');
  late final _wire_recover_node = _wire_recover_nodePtr.asFunction<
      void Function(
          int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_init_node(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_GreenlightCredentials> creds,
  ) {
    return _wire_init_node(
      port_,
      config,
      seed,
      creds,
    );
  }

  late final _wire_init_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_GreenlightCredentials>)>>('wire_init_node');
  late final _wire_init_node = _wire_init_nodePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Config>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_GreenlightCredentials>)>();

  void wire_stop_node(
    int port_,
  ) {
    return _wire_stop_node(
      port_,
    );
  }

  late final _wire_stop_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_node');
  late final _wire_stop_node =
      _wire_stop_nodePtr.asFunction<void Function(int)>();

  void wire_send_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> bolt11,
  ) {
    return _wire_send_payment(
      port_,
      bolt11,
    );
  }

  late final _wire_send_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_send_payment');
  late final _wire_send_payment = _wire_send_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> node_id,
    int amount_sats,
  ) {
    return _wire_send_spontaneous_payment(
      port_,
      node_id,
      amount_sats,
    );
  }

  late final _wire_send_spontaneous_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_send_spontaneous_payment');
  late final _wire_send_spontaneous_payment = _wire_send_spontaneous_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_payment(
    int port_,
    int amount_sats,
    ffi.Pointer<wire_uint_8_list> description,
  ) {
    return _wire_receive_payment(
      port_,
      amount_sats,
      description,
    );
  }

  late final _wire_receive_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_receive_payment');
  late final _wire_receive_payment = _wire_receive_paymentPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_node_state(
    int port_,
  ) {
    return _wire_get_node_state(
      port_,
    );
  }

  late final _wire_get_node_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_node_state');
  late final _wire_get_node_state =
      _wire_get_node_statePtr.asFunction<void Function(int)>();

  void wire_list_transactions(
    int port_,
    int filter,
    ffi.Pointer<ffi.Int64> from_timestamp,
    ffi.Pointer<ffi.Int64> to_timestamp,
  ) {
    return _wire_list_transactions(
      port_,
      filter,
      from_timestamp,
      to_timestamp,
    );
  }

  late final _wire_list_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('wire_list_transactions');
  late final _wire_list_transactions = _wire_list_transactionsPtr.asFunction<
      void Function(
          int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  void wire_list_lsps(
    int port_,
  ) {
    return _wire_list_lsps(
      port_,
    );
  }

  late final _wire_list_lspsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_lsps');
  late final _wire_list_lsps =
      _wire_list_lspsPtr.asFunction<void Function(int)>();

  void wire_set_lsp_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> lsp_id,
  ) {
    return _wire_set_lsp_id(
      port_,
      lsp_id,
    );
  }

  late final _wire_set_lsp_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_lsp_id');
  late final _wire_set_lsp_id = _wire_set_lsp_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_rates(
    int port_,
  ) {
    return _wire_fetch_rates(
      port_,
    );
  }

  late final _wire_fetch_ratesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_fetch_rates');
  late final _wire_fetch_rates =
      _wire_fetch_ratesPtr.asFunction<void Function(int)>();

  void wire_list_fiat_currencies(
    int port_,
  ) {
    return _wire_list_fiat_currencies(
      port_,
    );
  }

  late final _wire_list_fiat_currenciesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_fiat_currencies');
  late final _wire_list_fiat_currencies =
      _wire_list_fiat_currenciesPtr.asFunction<void Function(int)>();

  void wire_close_lsp_channels(
    int port_,
  ) {
    return _wire_close_lsp_channels(
      port_,
    );
  }

  late final _wire_close_lsp_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_close_lsp_channels');
  late final _wire_close_lsp_channels =
      _wire_close_lsp_channelsPtr.asFunction<void Function(int)>();

  void wire_withdraw(
    int port_,
    ffi.Pointer<wire_uint_8_list> to_address,
    int feerate_preset,
  ) {
    return _wire_withdraw(
      port_,
      to_address,
      feerate_preset,
    );
  }

  late final _wire_withdrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_withdraw');
  late final _wire_withdraw = _wire_withdrawPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse_invoice');
  late final _wire_parse_invoice = _wire_parse_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire_mnemonic_to_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mnemonic_to_seed');
  late final _wire_mnemonic_to_seed = _wire_mnemonic_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_GreenlightCredentials>
      new_box_autoadd_greenlight_credentials_0() {
    return _new_box_autoadd_greenlight_credentials_0();
  }

  late final _new_box_autoadd_greenlight_credentials_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_GreenlightCredentials>
              Function()>>('new_box_autoadd_greenlight_credentials_0');
  late final _new_box_autoadd_greenlight_credentials_0 =
      _new_box_autoadd_greenlight_credentials_0Ptr
          .asFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> breezserver;

  external ffi.Pointer<wire_uint_8_list> mempoolspace_url;

  external ffi.Pointer<wire_uint_8_list> working_dir;

  @ffi.Int32()
  external int network;

  @ffi.Uint32()
  external int payment_timeout_sec;
}

class wire_GreenlightCredentials extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_key;

  external ffi.Pointer<wire_uint_8_list> device_cert;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

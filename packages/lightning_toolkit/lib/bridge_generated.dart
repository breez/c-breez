// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class LightningToolkit {
  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  Future<String> hsmdHandle(
      {required String hexsecret, required String hexmessage, dynamic hint});
}

class LNInvoice {
  final String payeePubkey;
  final String description;
  final int? amount;
  final int timestamp;
  final int expiry;

  LNInvoice({
    required this.payeePubkey,
    required this.description,
    this.amount,
    required this.timestamp,
    required this.expiry,
  });
}

class LightningToolkitImpl extends FlutterRustBridgeBase<LightningToolkitWire>
    implements LightningToolkit {
  factory LightningToolkitImpl(ffi.DynamicLibrary dylib) =>
      LightningToolkitImpl.raw(LightningToolkitWire(dylib));

  LightningToolkitImpl.raw(LightningToolkitWire inner) : super(inner);

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_parse_invoice(port_, _api2wire_String(invoice)),
        parseSuccessData: _wire2api_ln_invoice,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "parse_invoice",
          argNames: ["invoice"],
        ),
        argValues: [invoice],
        hint: hint,
      ));

  Future<String> hsmdHandle(
          {required String hexsecret,
          required String hexmessage,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_hsmd_handle(
            port_, _api2wire_String(hexsecret), _api2wire_String(hexmessage)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "hsmd_handle",
          argNames: ["hexsecret", "hexmessage"],
        ),
        argValues: [hexsecret, hexmessage],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_box_autoadd_u64(dynamic raw) {
  return raw as int;
}

LNInvoice _wire2api_ln_invoice(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 5)
    throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
  return LNInvoice(
    payeePubkey: _wire2api_String(arr[0]),
    description: _wire2api_String(arr[1]),
    amount: _wire2api_opt_box_autoadd_u64(arr[2]),
    timestamp: _wire2api_u64(arr[3]),
    expiry: _wire2api_u64(arr[4]),
  );
}

int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_u64(raw);
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LightningToolkitWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningToolkitWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningToolkitWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse_invoice');
  late final _wire_parse_invoice = _wire_parse_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hsmd_handle(
    int port_,
    ffi.Pointer<wire_uint_8_list> hexsecret,
    ffi.Pointer<wire_uint_8_list> hexmessage,
  ) {
    return _wire_hsmd_handle(
      port_,
      hexsecret,
      hexmessage,
    );
  }

  late final _wire_hsmd_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_hsmd_handle');
  late final _wire_hsmd_handle = _wire_hsmd_handlePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartDefines = [:]
if (project.hasProperty('dart-defines')) {
    // Decode dart-defines, which are comma-separated and encoded in Base64, and store them in a variable.
    dartDefines = dartDefines + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=', 2)
                [(pair.first()): pair.last()]
            }
}

def envVariables = [
        API_KEY: project.hasProperty('API_KEY')
                ? API_KEY
                : "${dartDefines.API_KEY}",
]

android {
    namespace 'com.cBreez.client'
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    /* Temporary fix for

    Execution failed for task ':app:mergeDebugNativeLibs'.
        > A failure occurred while executing com.android.build.gradle.internal.tasks.MergeNativeLibsTask$MergeNativeLibsTaskWorkAction
        > 2 files found with path 'lib/arm64-v8a/libc++_shared.so' from inputs:
     */
    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/x86/libc++_shared.so', 'lib/x86_64/libc++_shared.so', 'lib/armeabi-v7a/libc++_shared.so', 'lib/arm64-v8a/libc++_shared.so']
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.cBreez.client"
        minSdkVersion 24 // Android 7.0
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        development {
            String filePath = keystoreProperties['storeFileDebug']
            if (filePath != null) {
                keyAlias keystoreProperties['aliasDebug']
                keyPassword keystoreProperties['passwordDebug']
                storeFile file(filePath)
                storePassword keystoreProperties['passwordDebug']
            } else {
                println("No storeFile provided, debug builds are using your local debug keystore")
            }
        }

        release {
            String filePath = keystoreProperties['storeFile']            
            if (filePath != null) {
                keyAlias keystoreProperties['alias']
                keyPassword keystoreProperties['password']
                storeFile file(filePath)
                storePassword keystoreProperties['password']
            } else {
                String storeFilePath = System.getenv("STORE_FILE")
                println("storeFilePath: " + storeFilePath)
                if (storeFilePath != null) {
                    println("using key properties from environment")
                    keyAlias System.getenv("KEY_ALIAS")
                    keyPassword System.getenv("KEY_PASSWORD")
                    storeFile file(storeFilePath)
                    storePassword System.getenv("STORE_PASSWORD")
                } else {
                    println("No storeFile provided, release builds are using your local debug keystore")
                }
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "app_name", "Breez Cloud - Debug"
            resValue "string", "breezApiKey", envVariables.API_KEY
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Breez Cloud"
            resValue "string", "breezApiKey", envVariables.API_KEY

            proguardFiles(
                    getDefaultProguardFile("proguard-android.txt"),
                    "proguard-rules.pro"
            )
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    /* FCM */
    implementation 'com.google.firebase:firebase-messaging:23.4.1'
    /* Logging */
    implementation 'org.tinylog:tinylog-api-kotlin:2.6.2'
    implementation 'org.tinylog:tinylog-impl:2.6.2'
}
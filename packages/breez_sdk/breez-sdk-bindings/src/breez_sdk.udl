dictionary RouteHintHop {    
     string src_node_id;
     u64 short_channel_id;
     u32 fees_base_msat;
     u32 fees_proportional_millionths;   
     u64 cltv_expiry_delta;    
     u64? htlc_minimum_msat;    
     u64? htlc_maximum_msat;
 };

[Error]
enum SDKError {
  "Error",
};

enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

dictionary GreenlightCredentials {
    sequence<u8> device_key;
    sequence<u8> device_cert;
};

dictionary Config {
    string breezserver;
    string mempoolspace_url;
    string working_dir;
    Network network;
    u32 payment_timeout_sec;
    string? default_lsp_id;
};

dictionary RouteHint {
    sequence<RouteHintHop> hops;
};

dictionary LNInvoice {
    string bolt11;
    string payee_pubkey;
    string payment_hash;
    string? description;
    string? description_hash;
    u64? amount_msat;
    u64 timestamp;
    u64 expiry;
    sequence<RouteHint> routing_hints;
    sequence<u8> payment_secret;
};

dictionary NodeState {
    string id;
    u32 block_height;
    u64 channels_balance_msat;
    u64 onchain_balance_msat;
    u64 max_payable_msat;
    u64 max_receivable_msat;
    u64 max_single_payment_amount_msat;
    u64 max_chan_reserve_msats;
    sequence<string> connected_peers;
    u64 inbound_liquidity_msats;
};

enum PaymentTypeFilter {
    "Sent",
    "Received",
    "All",
};

dictionary Payment {
    string payment_type;
    string payment_hash;
    i64 payment_time;
    string label;
    string destination_pubkey;
    i32 amount_msat;
    i32 fees_msat;
    string payment_preimage;
    boolean keysend;
    string bolt11;
    boolean pending;
    string? description;
};

dictionary Rate {
    string coin;
    f64 value;
};

dictionary Symbol {
    string? grapheme;
    string? template;
    boolean? rtl;
    u32? position;
};

dictionary LocaleOverrides {
    string locale;
    u32? spacing;
    Symbol symbol;
};

dictionary LocalizedName {
    string locale;
    string name;
};

dictionary CurrencyInfo {
    string name;
    u32 fraction_size;
    u32? spacing;
    Symbol? symbol;
    Symbol? uniq_symbol;
    sequence<LocalizedName>? localized_name;
    sequence<LocaleOverrides>? locale_overrides;
};

dictionary FiatCurrency {
    string id;
    CurrencyInfo info;
};

enum FeeratePreset {
    "Regular",
    "Economy",
    "Priority",
};

dictionary LogEntry {
    string line;
    string level;
};

dictionary InvoicePaidDetails {
    string payment_hash;
    string bolt11;
};

[Enum]
interface BreezEvent {
    NewBlock(u32 block);
    InvoicePaid(InvoicePaidDetails details);
};

callback interface LogStream {
    void log(LogEntry l);
};

callback interface EventListener {    
    void on_event(BreezEvent e);
};

dictionary LspInformation {
    string id;
    string name;
    string widget_url;
    string pubkey;
    string host;
    i64 channel_capacity;
    i32 target_conf;
    i64 base_fee_msat;
    f64 fee_rate;
    u32 time_lock_delta;
    i64 min_htlc_msat;
    i64 channel_fee_permyriad;
    sequence<u8> lsp_pubkey;
    i64 max_inactive_duration;
    i64 channel_minimum_fee_msat;
};

enum SwapStatus {
    "Initial",
    "Expired",    
};

dictionary SwapInfo {
    string bitcoin_address;
    i64 created_at;
    i64 lock_height;
    sequence<u8> payment_hash;
    sequence<u8> preimage;
    sequence<u8> private_key;
    sequence<u8> public_key;
    sequence<u8> swapper_public_key;
    sequence<u8> script;
    string? bolt11;
    u32 paid_sats;
    u32 confirmed_sats;
    SwapStatus status;
    sequence<string> refund_tx_ids;
    sequence<string> confirmed_tx_ids;
};

dictionary BitcoinAddressData {
    string address;
    Network network;
    u64? amount_sat;
    string? label;
    string? message;
};

dictionary LnUrlErrorData {
    string reason;
};

dictionary LnUrlPayRequestData {
    string callback;
    u64 min_sendable;
    u64 max_sendable; 
    string metadata_str;
    u64 comment_allowed;
};

dictionary LnUrlWithdrawRequestData {
    string callback;
    string k1;
    string default_description;
    u16 min_withdrawable;
    u16 max_withdrawable;
};

dictionary LnUrlAuthRequestData {
    string k1;
};

dictionary MetadataItem {
    string key;
    string value;
};

[Enum]
interface InputType {
    BitcoinAddress(BitcoinAddressData address);   
    Bolt11(LNInvoice invoice);
    NodeId(string node_id);
    Url(string url);
    LnUrlPay(LnUrlPayRequestData data);
    LnUrlWithdraw(LnUrlWithdrawRequestData data);
    LnUrlAuth(LnUrlAuthRequestData data);
    LnUrlError(LnUrlErrorData data);
};

interface BlockingBreezServices {

   [Throws=SDKError]
   void stop();

   [Throws=SDKError]
   void send_payment(string bolt11);
    
   [Throws=SDKError]
   void send_spontaneous_payment(string node_id, u64 amount_sats);

   [Throws=SDKError]
   LNInvoice receive_payment(u64 amount_sats, string description);

   [Throws=SDKError]
   NodeState? node_info();

   [Throws=SDKError]
   sequence<Payment> list_payments(PaymentTypeFilter filter, i64? from_timestamp, i64? to_timestamp);

   [Throws=SDKError]
   void sweep(string to_address, FeeratePreset feerate_preset); 

   [Throws=SDKError]
   sequence<Rate> fetch_fiat_rates();

   [Throws=SDKError]
   sequence<FiatCurrency> list_fiat_currencies();        

   [Throws=SDKError]
   sequence<LspInformation> list_lsps();

   [Throws=SDKError]
   void connect_lsp(string lsp_id);

   [Throws=SDKError]
   LspInformation lsp_info();

   [Throws=SDKError]
   void close_lsp_channels(); 

   [Throws=SDKError]
   SwapInfo receive_onchain();

   [Throws=SDKError]
   sequence<SwapInfo> list_refundables();
   
   [Throws=SDKError]
   string refund(string swap_address, string to_address, u32 sat_per_vbyte); 
};

namespace breez_sdk { 
 
 [Throws=SDKError]
 GreenlightCredentials register_node(Network network, sequence<u8> seed, Config? config);

 [Throws=SDKError]
 GreenlightCredentials recover_node(Network network, sequence<u8> seed, Config? config);

 [Throws=SDKError]
 BlockingBreezServices start(Config? config, sequence<u8> seed, GreenlightCredentials creds, EventListener listener);

 [Throws=SDKError]
 void set_log_stream(LogStream log_stream);

 [Throws=SDKError]
 LNInvoice parse_invoice(string invoice);

 [Throws=SDKError]
 InputType parse_input(string s);

 [Throws=SDKError]
 sequence<u8> mnemonic_to_seed(string phrase);

};
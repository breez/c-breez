// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.43.0.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class LightningToolkit {
  Future<Uint8List> initHsmd(
      {required String storagePath, required Uint8List secret, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitHsmdConstMeta;

  Future<void> validateMnemonic({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kValidateMnemonicConstMeta;

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta;

  Future<SwapKeys> createSwap({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateSwapConstMeta;

  Future<Uint8List> createSubmaringSwapScript(
      {required Uint8List hash,
      required Uint8List swapperPubKey,
      required Uint8List payerPubKey,
      required int lockHeight,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateSubmaringSwapScriptConstMeta;

  Future<Uint8List> encrypt(
      {required Uint8List key, required Uint8List msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptConstMeta;

  Future<Uint8List> decrypt(
      {required Uint8List key, required Uint8List msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptConstMeta;

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta;

  Future<Uint8List> nodePubkey(
      {required String storagePath, required Uint8List secret, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNodePubkeyConstMeta;

  Future<String> addRoutingHints(
      {required String storagePath,
      required Uint8List secret,
      required String invoice,
      required List<RouteHint> hints,
      required int newAmount,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddRoutingHintsConstMeta;

  Future<Uint8List> signMessage(
      {required String storagePath,
      required Uint8List secret,
      required Uint8List msg,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMessageConstMeta;

  Future<Uint8List> handle(
      {required String storagePath,
      required Uint8List secret,
      required Uint8List msg,
      Uint8List? peerId,
      required int dbId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleConstMeta;
}

class LNInvoice {
  final String payeePubkey;
  final String paymentHash;
  final String description;
  final int? amount;
  final int timestamp;
  final int expiry;
  final List<RouteHint> routingHints;
  final Uint8List paymentSecret;

  LNInvoice({
    required this.payeePubkey,
    required this.paymentHash,
    required this.description,
    this.amount,
    required this.timestamp,
    required this.expiry,
    required this.routingHints,
    required this.paymentSecret,
  });
}

class RouteHint {
  final List<RouteHintHop> field0;

  RouteHint({
    required this.field0,
  });
}

class RouteHintHop {
  /// The node_id of the non-target end of the route
  final String srcNodeId;

  /// The short_channel_id of this channel
  final int shortChannelId;

  /// The fees which must be paid to use this channel
  final int feesBaseMsat;
  final int feesProportionalMillionths;

  /// The difference in CLTV values between this node and the next node.
  final int cltvExpiryDelta;

  /// The minimum value, in msat, which must be relayed to the next hop.
  final int? htlcMinimumMsat;

  /// The maximum value in msat available for routing with a single HTLC.
  final int? htlcMaximumMsat;

  RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });
}

class SwapKeys {
  final Uint8List privkey;
  final Uint8List pubkey;
  final Uint8List preimage;
  final Uint8List hash;

  SwapKeys({
    required this.privkey,
    required this.pubkey,
    required this.preimage,
    required this.hash,
  });
}

class LightningToolkitImpl extends FlutterRustBridgeBase<LightningToolkitWire>
    implements LightningToolkit {
  factory LightningToolkitImpl(ffi.DynamicLibrary dylib) =>
      LightningToolkitImpl.raw(LightningToolkitWire(dylib));

  LightningToolkitImpl.raw(LightningToolkitWire inner) : super(inner);

  Future<Uint8List> initHsmd(
          {required String storagePath,
          required Uint8List secret,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_hsmd(port_,
            _api2wire_String(storagePath), _api2wire_uint_8_list(secret)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kInitHsmdConstMeta,
        argValues: [storagePath, secret],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitHsmdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_hsmd",
        argNames: ["storagePath", "secret"],
      );

  Future<void> validateMnemonic({required String phrase, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_validate_mnemonic(port_, _api2wire_String(phrase)),
        parseSuccessData: _wire2api_unit,
        constMeta: kValidateMnemonicConstMeta,
        argValues: [phrase],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kValidateMnemonicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "validate_mnemonic",
        argNames: ["phrase"],
      );

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_mnemonic_to_seed(port_, _api2wire_String(phrase)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kMnemonicToSeedConstMeta,
        argValues: [phrase],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_to_seed",
        argNames: ["phrase"],
      );

  Future<SwapKeys> createSwap({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_swap(port_),
        parseSuccessData: _wire2api_swap_keys,
        constMeta: kCreateSwapConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateSwapConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_swap",
        argNames: [],
      );

  Future<Uint8List> createSubmaringSwapScript(
          {required Uint8List hash,
          required Uint8List swapperPubKey,
          required Uint8List payerPubKey,
          required int lockHeight,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_submaring_swap_script(
            port_,
            _api2wire_uint_8_list(hash),
            _api2wire_uint_8_list(swapperPubKey),
            _api2wire_uint_8_list(payerPubKey),
            _api2wire_i64(lockHeight)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kCreateSubmaringSwapScriptConstMeta,
        argValues: [hash, swapperPubKey, payerPubKey, lockHeight],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateSubmaringSwapScriptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_submaring_swap_script",
        argNames: ["hash", "swapperPubKey", "payerPubKey", "lockHeight"],
      );

  Future<Uint8List> encrypt(
          {required Uint8List key, required Uint8List msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_encrypt(
            port_, _api2wire_uint_8_list(key), _api2wire_uint_8_list(msg)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kEncryptConstMeta,
        argValues: [key, msg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEncryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt",
        argNames: ["key", "msg"],
      );

  Future<Uint8List> decrypt(
          {required Uint8List key, required Uint8List msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrypt(
            port_, _api2wire_uint_8_list(key), _api2wire_uint_8_list(msg)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDecryptConstMeta,
        argValues: [key, msg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecryptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt",
        argNames: ["key", "msg"],
      );

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_parse_invoice(port_, _api2wire_String(invoice)),
        parseSuccessData: _wire2api_ln_invoice,
        constMeta: kParseInvoiceConstMeta,
        argValues: [invoice],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_invoice",
        argNames: ["invoice"],
      );

  Future<Uint8List> nodePubkey(
          {required String storagePath,
          required Uint8List secret,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_node_pubkey(port_,
            _api2wire_String(storagePath), _api2wire_uint_8_list(secret)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kNodePubkeyConstMeta,
        argValues: [storagePath, secret],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNodePubkeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "node_pubkey",
        argNames: ["storagePath", "secret"],
      );

  Future<String> addRoutingHints(
          {required String storagePath,
          required Uint8List secret,
          required String invoice,
          required List<RouteHint> hints,
          required int newAmount,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_add_routing_hints(
            port_,
            _api2wire_String(storagePath),
            _api2wire_uint_8_list(secret),
            _api2wire_String(invoice),
            _api2wire_list_route_hint(hints),
            _api2wire_u64(newAmount)),
        parseSuccessData: _wire2api_String,
        constMeta: kAddRoutingHintsConstMeta,
        argValues: [storagePath, secret, invoice, hints, newAmount],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAddRoutingHintsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_routing_hints",
        argNames: ["storagePath", "secret", "invoice", "hints", "newAmount"],
      );

  Future<Uint8List> signMessage(
          {required String storagePath,
          required Uint8List secret,
          required Uint8List msg,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sign_message(
            port_,
            _api2wire_String(storagePath),
            _api2wire_uint_8_list(secret),
            _api2wire_uint_8_list(msg)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kSignMessageConstMeta,
        argValues: [storagePath, secret, msg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_message",
        argNames: ["storagePath", "secret", "msg"],
      );

  Future<Uint8List> handle(
          {required String storagePath,
          required Uint8List secret,
          required Uint8List msg,
          Uint8List? peerId,
          required int dbId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle(
            port_,
            _api2wire_String(storagePath),
            _api2wire_uint_8_list(secret),
            _api2wire_uint_8_list(msg),
            _api2wire_opt_uint_8_list(peerId),
            _api2wire_u64(dbId)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kHandleConstMeta,
        argValues: [storagePath, secret, msg, peerId, dbId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle",
        argNames: ["storagePath", "secret", "msg", "peerId", "dbId"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<ffi.Uint64> _api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(_api2wire_u64(raw));
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  ffi.Pointer<wire_list_route_hint> _api2wire_list_route_hint(
      List<RouteHint> raw) {
    final ans = inner.new_list_route_hint_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_route_hint(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_route_hint_hop> _api2wire_list_route_hint_hop(
      List<RouteHintHop> raw) {
    final ans = inner.new_list_route_hint_hop_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_route_hint_hop(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<ffi.Uint64> _api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_u64(raw);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_uint_8_list(raw);
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_route_hint(RouteHint apiObj, wire_RouteHint wireObj) {
    wireObj.field0 = _api2wire_list_route_hint_hop(apiObj.field0);
  }

  void _api_fill_to_wire_route_hint_hop(
      RouteHintHop apiObj, wire_RouteHintHop wireObj) {
    wireObj.src_node_id = _api2wire_String(apiObj.srcNodeId);
    wireObj.short_channel_id = _api2wire_u64(apiObj.shortChannelId);
    wireObj.fees_base_msat = _api2wire_u32(apiObj.feesBaseMsat);
    wireObj.fees_proportional_millionths =
        _api2wire_u32(apiObj.feesProportionalMillionths);
    wireObj.cltv_expiry_delta = _api2wire_u64(apiObj.cltvExpiryDelta);
    wireObj.htlc_minimum_msat =
        _api2wire_opt_box_autoadd_u64(apiObj.htlcMinimumMsat);
    wireObj.htlc_maximum_msat =
        _api2wire_opt_box_autoadd_u64(apiObj.htlcMaximumMsat);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_box_autoadd_u64(dynamic raw) {
  return raw as int;
}

List<RouteHint> _wire2api_list_route_hint(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_route_hint).toList();
}

List<RouteHintHop> _wire2api_list_route_hint_hop(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_route_hint_hop).toList();
}

LNInvoice _wire2api_ln_invoice(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 8)
    throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
  return LNInvoice(
    payeePubkey: _wire2api_String(arr[0]),
    paymentHash: _wire2api_String(arr[1]),
    description: _wire2api_String(arr[2]),
    amount: _wire2api_opt_box_autoadd_u64(arr[3]),
    timestamp: _wire2api_u64(arr[4]),
    expiry: _wire2api_u64(arr[5]),
    routingHints: _wire2api_list_route_hint(arr[6]),
    paymentSecret: _wire2api_uint_8_list(arr[7]),
  );
}

int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_u64(raw);
}

RouteHint _wire2api_route_hint(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return RouteHint(
    field0: _wire2api_list_route_hint_hop(arr[0]),
  );
}

RouteHintHop _wire2api_route_hint_hop(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 7)
    throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
  return RouteHintHop(
    srcNodeId: _wire2api_String(arr[0]),
    shortChannelId: _wire2api_u64(arr[1]),
    feesBaseMsat: _wire2api_u32(arr[2]),
    feesProportionalMillionths: _wire2api_u32(arr[3]),
    cltvExpiryDelta: _wire2api_u64(arr[4]),
    htlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
    htlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
  );
}

SwapKeys _wire2api_swap_keys(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return SwapKeys(
    privkey: _wire2api_uint_8_list(arr[0]),
    pubkey: _wire2api_uint_8_list(arr[1]),
    preimage: _wire2api_uint_8_list(arr[2]),
    hash: _wire2api_uint_8_list(arr[3]),
  );
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LightningToolkitWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningToolkitWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningToolkitWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_init_hsmd(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_init_hsmd(
      port_,
      storage_path,
      secret,
    );
  }

  late final _wire_init_hsmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init_hsmd');
  late final _wire_init_hsmd = _wire_init_hsmdPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_validate_mnemonic(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_validate_mnemonic(
      port_,
      phrase,
    );
  }

  late final _wire_validate_mnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_validate_mnemonic');
  late final _wire_validate_mnemonic = _wire_validate_mnemonicPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire_mnemonic_to_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mnemonic_to_seed');
  late final _wire_mnemonic_to_seed = _wire_mnemonic_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_swap(
    int port_,
  ) {
    return _wire_create_swap(
      port_,
    );
  }

  late final _wire_create_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_swap');
  late final _wire_create_swap =
      _wire_create_swapPtr.asFunction<void Function(int)>();

  void wire_create_submaring_swap_script(
    int port_,
    ffi.Pointer<wire_uint_8_list> hash,
    ffi.Pointer<wire_uint_8_list> swapper_pub_key,
    ffi.Pointer<wire_uint_8_list> payer_pub_key,
    int lock_height,
  ) {
    return _wire_create_submaring_swap_script(
      port_,
      hash,
      swapper_pub_key,
      payer_pub_key,
      lock_height,
    );
  }

  late final _wire_create_submaring_swap_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int64)>>('wire_create_submaring_swap_script');
  late final _wire_create_submaring_swap_script =
      _wire_create_submaring_swap_scriptPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int)>();

  void wire_encrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_encrypt(
      port_,
      key,
      msg,
    );
  }

  late final _wire_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_encrypt');
  late final _wire_encrypt = _wire_encryptPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_decrypt(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_decrypt(
      port_,
      key,
      msg,
    );
  }

  late final _wire_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decrypt');
  late final _wire_decrypt = _wire_decryptPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse_invoice');
  late final _wire_parse_invoice = _wire_parse_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_node_pubkey(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_node_pubkey(
      port_,
      storage_path,
      secret,
    );
  }

  late final _wire_node_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_node_pubkey');
  late final _wire_node_pubkey = _wire_node_pubkeyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_routing_hints(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> invoice,
    ffi.Pointer<wire_list_route_hint> hints,
    int new_amount,
  ) {
    return _wire_add_routing_hints(
      port_,
      storage_path,
      secret,
      invoice,
      hints,
      new_amount,
    );
  }

  late final _wire_add_routing_hintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_route_hint>,
              ffi.Uint64)>>('wire_add_routing_hints');
  late final _wire_add_routing_hints = _wire_add_routing_hintsPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_route_hint>,
          int)>();

  void wire_sign_message(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_sign_message(
      port_,
      storage_path,
      secret,
      msg,
    );
  }

  late final _wire_sign_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sign_message');
  late final _wire_sign_message = _wire_sign_messagePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle(
    int port_,
    ffi.Pointer<wire_uint_8_list> storage_path,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> peer_id,
    int db_id,
  ) {
    return _wire_handle(
      port_,
      storage_path,
      secret,
      msg,
      peer_id,
      db_id,
    );
  }

  late final _wire_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_handle');
  late final _wire_handle = _wire_handlePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_list_route_hint> new_list_route_hint_0(
    int len,
  ) {
    return _new_list_route_hint_0(
      len,
    );
  }

  late final _new_list_route_hint_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_route_hint> Function(
              ffi.Int32)>>('new_list_route_hint_0');
  late final _new_list_route_hint_0 = _new_list_route_hint_0Ptr
      .asFunction<ffi.Pointer<wire_list_route_hint> Function(int)>();

  ffi.Pointer<wire_list_route_hint_hop> new_list_route_hint_hop_0(
    int len,
  ) {
    return _new_list_route_hint_hop_0(
      len,
    );
  }

  late final _new_list_route_hint_hop_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_route_hint_hop> Function(
              ffi.Int32)>>('new_list_route_hint_hop_0');
  late final _new_list_route_hint_hop_0 = _new_list_route_hint_hop_0Ptr
      .asFunction<ffi.Pointer<wire_list_route_hint_hop> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    int ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(int)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RouteHintHop extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> src_node_id;

  @ffi.Uint64()
  external int short_channel_id;

  @ffi.Uint32()
  external int fees_base_msat;

  @ffi.Uint32()
  external int fees_proportional_millionths;

  @ffi.Uint64()
  external int cltv_expiry_delta;

  external ffi.Pointer<ffi.Uint64> htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> htlc_maximum_msat;
}

class wire_list_route_hint_hop extends ffi.Struct {
  external ffi.Pointer<wire_RouteHintHop> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RouteHint extends ffi.Struct {
  external ffi.Pointer<wire_list_route_hint_hop> field0;
}

class wire_list_route_hint extends ffi.Struct {
  external ffi.Pointer<wire_RouteHint> ptr;

  @ffi.Int32()
  external int len;
}

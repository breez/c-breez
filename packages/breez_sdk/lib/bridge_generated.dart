// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.53.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class LightningToolkit {
  /// Register a new node in the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> registerNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta;

  /// Recover an existing node from the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> recoverNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta;

  /// init_node initialized the global NodeService, schedule the node to run in the cloud and
  /// run the signer. This must be called in order to start comunicate with the node
  ///
  /// # Arguments
  ///
  /// * `config` - The sdk configuration
  /// * `seed` - The node private key
  /// * `creds` - The greenlight credentials
  ///
  Future<void> initNode(
      {Config? config,
      required Uint8List seed,
      required GreenlightCredentials creds,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitNodeConstMeta;

  Stream<BreezEvent> breezEventsStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta;

  Stream<LogEntry> breezLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta;

  /// Cleanup node resources and stop the signer.
  Future<void> stopNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta;

  /// pay a bolt11 invoice
  ///
  /// # Arguments
  ///
  /// * `bolt11` - The bolt11 invoice
  Future<void> sendPayment({required String bolt11, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta;

  /// pay directly to a node id using keysend
  ///
  /// # Arguments
  ///
  /// * `node_id` - The destination node_id
  /// * `amount_sats` - The amount to pay in satoshis
  Future<void> sendSpontaneousPayment(
      {required String nodeId, required int amountSats, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta;

  /// Creates an bolt11 payment request.
  /// This also works when the node doesn't have any channels and need inbound liquidity.
  /// In such case when the invoice is paid a new zero-conf channel will be open by the LSP,
  /// providing inbound liquidity and the payment will be routed via this new channel.
  ///
  /// # Arguments
  ///
  /// * `description` - The bolt11 payment request description
  /// * `amount_sats` - The amount to receive in satoshis
  Future<LNInvoice> receivePayment(
      {required int amountSats, required String description, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta;

  /// get the node state from the persistent storage
  Future<NodeState?> nodeInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta;

  /// list transactions (incoming/outgoing payments) from the persistent storage
  Future<List<Payment>> listPayments(
      {required PaymentTypeFilter filter,
      int? fromTimestamp,
      int? toTimestamp,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta;

  /// List available lsps that can be selected by the user
  Future<List<LspInformation>> listLsps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta;

  /// Select the lsp to be used and provide inbound liquidity
  Future<void> connectLsp({required String lspId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta;

  /// Convenience method to look up LSP info based on current LSP ID
  Future<LspInformation> lspInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLspInfoConstMeta;

  /// Fetch live rates of fiat currencies
  Future<List<Rate>> fetchFiatRates({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta;

  /// List all available fiat currencies
  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta;

  /// close all channels with the current lsp
  Future<void> closeLspChannels({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta;

  /// Withdraw on-chain funds in the wallet to an external btc address
  Future<void> sweep(
      {required String toAddress,
      required FeeratePreset feeratePreset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSweepConstMeta;

  /// swaps
  /// Onchain receive swap API
  Future<SwapInfo> receiveOnchain({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta;

  Future<List<SwapInfo>> listRefundables({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta;

  Future<String> refund(
      {required String swapAddress,
      required String toAddress,
      required int satPerVbyte,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta;

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta;

  Future<InputType> parse({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseConstMeta;

  /// Second step of LNURL-pay. The first step is `parse()`, which also validates the LNURL destination
  /// and generates the `LnUrlPayRequestData` payload needed here.
  Future<LnUrlPayResult> payLnurl(
      {required int userAmountSat,
      String? comment,
      required LnUrlPayRequestData reqData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPayLnurlConstMeta;

  /// Second step of LNURL-withdraw. The first step is `parse()`, which also validates the LNURL destination
  /// and generates the `LnUrlW` payload needed here.
  Future<LnUrlWithdrawCallbackStatus> withdrawLnurl(
      {required LnUrlWithdrawRequestData reqData,
      required int amountSats,
      String? description,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithdrawLnurlConstMeta;

  /// Attempts to convert the phrase to a mnemonic, then to a seed.
  ///
  /// If the phrase is not a valid mnemonic, an error is returned.
  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta;
}

class BitcoinAddressData {
  final String address;
  final Network network;
  final int? amountSat;
  final String? label;
  final String? message;

  BitcoinAddressData({
    required this.address,
    required this.network,
    this.amountSat,
    this.label,
    this.message,
  });
}

@freezed
class BreezEvent with _$BreezEvent {
  const factory BreezEvent.newBlock({
    required int block,
  }) = BreezEvent_NewBlock;
  const factory BreezEvent.invoicePaid({
    required InvoicePaidDetails details,
  }) = BreezEvent_InvoicePaid;
}

class Config {
  final String breezserver;
  final String mempoolspaceUrl;
  final String workingDir;
  final Network network;
  final int paymentTimeoutSec;
  final String? defaultLspId;

  Config({
    required this.breezserver,
    required this.mempoolspaceUrl,
    required this.workingDir,
    required this.network,
    required this.paymentTimeoutSec,
    this.defaultLspId,
  });
}

class CurrencyInfo {
  final String name;
  final int fractionSize;
  final int? spacing;
  final Symbol? symbol;
  final Symbol? uniqSymbol;
  final List<LocalizedName>? localizedName;
  final List<LocaleOverrides>? localeOverrides;

  CurrencyInfo({
    required this.name,
    required this.fractionSize,
    this.spacing,
    this.symbol,
    this.uniqSymbol,
    this.localizedName,
    this.localeOverrides,
  });
}

enum FeeratePreset {
  Regular,
  Economy,
  Priority,
}

class FiatCurrency {
  final String id;
  final CurrencyInfo info;

  FiatCurrency({
    required this.id,
    required this.info,
  });
}

class GreenlightCredentials {
  final Uint8List deviceKey;
  final Uint8List deviceCert;

  GreenlightCredentials({
    required this.deviceKey,
    required this.deviceCert,
  });
}

@freezed
class InputType with _$InputType {
  /// # Supported standards
  ///
  /// - plain on-chain BTC address
  /// - BIP21
  const factory InputType.bitcoinAddress({
    required BitcoinAddressData address,
  }) = InputType_BitcoinAddress;

  /// Also covers URIs like `bitcoin:...&lightning=bolt11`. In this case, it returns the BOLT11
  /// and discards all other data.
  const factory InputType.bolt11({
    required LNInvoice invoice,
  }) = InputType_Bolt11;
  const factory InputType.nodeId({
    required String nodeId,
  }) = InputType_NodeId;
  const factory InputType.url({
    required String url,
  }) = InputType_Url;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-06 `payRequest` spec
  /// - LUD-16 LN Address
  /// - LUD-17 Support for lnurlp prefix with non-bech32-encoded LNURL URLs
  const factory InputType.lnUrlPay({
    required LnUrlPayRequestData data,
  }) = InputType_LnUrlPay;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-03 `withdrawRequest` spec
  /// - LUD-17 Support for lnurlw prefix with non-bech32-encoded LNURL URLs
  ///
  /// # Not supported (yet)
  ///
  /// - LUD-14 `balanceCheck`: reusable `withdrawRequest`s
  /// - LUD-19 Pay link discoverable from withdraw link
  const factory InputType.lnUrlWithdraw({
    required LnUrlWithdrawRequestData data,
  }) = InputType_LnUrlWithdraw;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-04 `auth` base spec
  /// - LUD-17 Support for keyauth prefix with non-bech32-encoded LNURL URLs
  const factory InputType.lnUrlAuth({
    required LnUrlAuthRequestData data,
  }) = InputType_LnUrlAuth;
  const factory InputType.lnUrlError({
    required LnUrlErrorData data,
  }) = InputType_LnUrlError;
}

class InvoicePaidDetails {
  final String paymentHash;
  final String bolt11;

  InvoicePaidDetails({
    required this.paymentHash,
    required this.bolt11,
  });
}

class LNInvoice {
  final String bolt11;
  final String payeePubkey;
  final String paymentHash;
  final String? description;
  final String? descriptionHash;
  final int? amountMsat;
  final int timestamp;
  final int expiry;
  final List<RouteHint> routingHints;
  final Uint8List paymentSecret;

  LNInvoice({
    required this.bolt11,
    required this.payeePubkey,
    required this.paymentHash,
    this.description,
    this.descriptionHash,
    this.amountMsat,
    required this.timestamp,
    required this.expiry,
    required this.routingHints,
    required this.paymentSecret,
  });
}

class LnUrlAuthRequestData {
  final String k1;

  LnUrlAuthRequestData({
    required this.k1,
  });
}

class LnUrlErrorData {
  final String reason;

  LnUrlErrorData({
    required this.reason,
  });
}

class LnUrlPayRequestData {
  final String callback;
  final int minSendable;
  final int maxSendable;

  /// As per LUD-06, `metadata` is a raw string (e.g. a json representation of the inner map).
  /// Use `metadata_vec()` to get the parsed items.
  final String metadataStr;
  final int commentAllowed;

  LnUrlPayRequestData({
    required this.callback,
    required this.minSendable,
    required this.maxSendable,
    required this.metadataStr,
    required this.commentAllowed,
  });
}

@freezed
class LnUrlPayResult with _$LnUrlPayResult {
  const factory LnUrlPayResult.endpointSuccess([
    SuccessAction? field0,
  ]) = LnUrlPayResult_EndpointSuccess;
  const factory LnUrlPayResult.endpointError(
    LnUrlErrorData field0,
  ) = LnUrlPayResult_EndpointError;
}

@freezed
class LnUrlWithdrawCallbackStatus with _$LnUrlWithdrawCallbackStatus {
  /// On-wire format is: `{"status": "OK"}`
  const factory LnUrlWithdrawCallbackStatus.ok() =
      LnUrlWithdrawCallbackStatus_Ok;

  /// On-wire format is: `{"status": "ERROR", "reason": "error details..."}`
  const factory LnUrlWithdrawCallbackStatus.error(
    LnUrlErrorData field0,
  ) = LnUrlWithdrawCallbackStatus_Error;
}

class LnUrlWithdrawRequestData {
  final String callback;
  final String k1;
  final String defaultDescription;
  final int minWithdrawable;
  final int maxWithdrawable;

  LnUrlWithdrawRequestData({
    required this.callback,
    required this.k1,
    required this.defaultDescription,
    required this.minWithdrawable,
    required this.maxWithdrawable,
  });
}

class LocaleOverrides {
  final String locale;
  final int? spacing;
  final Symbol symbol;

  LocaleOverrides({
    required this.locale,
    this.spacing,
    required this.symbol,
  });
}

class LocalizedName {
  final String locale;
  final String name;

  LocalizedName({
    required this.locale,
    required this.name,
  });
}

class LogEntry {
  final String line;
  final String level;

  LogEntry({
    required this.line,
    required this.level,
  });
}

class LspInformation {
  final String id;
  final String name;
  final String widgetUrl;
  final String pubkey;
  final String host;
  final int channelCapacity;
  final int targetConf;
  final int baseFeeMsat;
  final double feeRate;
  final int timeLockDelta;
  final int minHtlcMsat;
  final int channelFeePermyriad;
  final Uint8List lspPubkey;
  final int maxInactiveDuration;
  final int channelMinimumFeeMsat;

  LspInformation({
    required this.id,
    required this.name,
    required this.widgetUrl,
    required this.pubkey,
    required this.host,
    required this.channelCapacity,
    required this.targetConf,
    required this.baseFeeMsat,
    required this.feeRate,
    required this.timeLockDelta,
    required this.minHtlcMsat,
    required this.channelFeePermyriad,
    required this.lspPubkey,
    required this.maxInactiveDuration,
    required this.channelMinimumFeeMsat,
  });
}

class MessageSuccessActionData {
  final String message;

  MessageSuccessActionData({
    required this.message,
  });
}

enum Network {
  /// Mainnet
  Bitcoin,
  Testnet,
  Signet,
  Regtest,
}

class NodeState {
  final String id;
  final int blockHeight;
  final int channelsBalanceMsat;
  final int onchainBalanceMsat;
  final int maxPayableMsat;
  final int maxReceivableMsat;
  final int maxSinglePaymentAmountMsat;
  final int maxChanReserveMsats;
  final List<String> connectedPeers;
  final int inboundLiquidityMsats;

  NodeState({
    required this.id,
    required this.blockHeight,
    required this.channelsBalanceMsat,
    required this.onchainBalanceMsat,
    required this.maxPayableMsat,
    required this.maxReceivableMsat,
    required this.maxSinglePaymentAmountMsat,
    required this.maxChanReserveMsats,
    required this.connectedPeers,
    required this.inboundLiquidityMsats,
  });
}

class Payment {
  final String paymentType;
  final String paymentHash;
  final int paymentTime;
  final String label;
  final String destinationPubkey;
  final int amountMsat;
  final int feesMsat;
  final String paymentPreimage;
  final bool keysend;
  final String bolt11;
  final bool pending;
  final String? description;

  Payment({
    required this.paymentType,
    required this.paymentHash,
    required this.paymentTime,
    required this.label,
    required this.destinationPubkey,
    required this.amountMsat,
    required this.feesMsat,
    required this.paymentPreimage,
    required this.keysend,
    required this.bolt11,
    required this.pending,
    this.description,
  });
}

enum PaymentTypeFilter {
  Sent,
  Received,
  All,
}

class Rate {
  final String coin;
  final double value;

  Rate({
    required this.coin,
    required this.value,
  });
}

class RouteHint {
  final List<RouteHintHop> hops;

  RouteHint({
    required this.hops,
  });
}

class RouteHintHop {
  /// The node_id of the non-target end of the route
  final String srcNodeId;

  /// The short_channel_id of this channel
  final int shortChannelId;

  /// The fees which must be paid to use this channel
  final int feesBaseMsat;
  final int feesProportionalMillionths;

  /// The difference in CLTV values between this node and the next node.
  final int cltvExpiryDelta;

  /// The minimum value, in msat, which must be relayed to the next hop.
  final int? htlcMinimumMsat;

  /// The maximum value in msat available for routing with a single HTLC.
  final int? htlcMaximumMsat;

  RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });
}

@freezed
class SuccessAction with _$SuccessAction {
  const factory SuccessAction.message(
    MessageSuccessActionData field0,
  ) = SuccessAction_Message;
  const factory SuccessAction.url(
    UrlSuccessActionData field0,
  ) = SuccessAction_Url;
}

class SwapInfo {
  final String bitcoinAddress;
  final int createdAt;
  final int lockHeight;
  final Uint8List paymentHash;
  final Uint8List preimage;
  final Uint8List privateKey;
  final Uint8List publicKey;
  final Uint8List swapperPublicKey;
  final Uint8List script;
  final String? bolt11;
  final int paidSats;
  final int confirmedSats;
  final SwapStatus status;

  SwapInfo({
    required this.bitcoinAddress,
    required this.createdAt,
    required this.lockHeight,
    required this.paymentHash,
    required this.preimage,
    required this.privateKey,
    required this.publicKey,
    required this.swapperPublicKey,
    required this.script,
    this.bolt11,
    required this.paidSats,
    required this.confirmedSats,
    required this.status,
  });
}

enum SwapStatus {
  Initial,
  Expired,
  Refunded,
}

class Symbol {
  final String? grapheme;
  final String? template;
  final bool? rtl;
  final int? position;

  Symbol({
    this.grapheme,
    this.template,
    this.rtl,
    this.position,
  });
}

class UrlSuccessActionData {
  final String description;
  final String url;

  UrlSuccessActionData({
    required this.description,
    required this.url,
  });
}

class LightningToolkitImpl implements LightningToolkit {
  final LightningToolkitPlatform _platform;
  factory LightningToolkitImpl(ExternalLibrary dylib) =>
      LightningToolkitImpl.raw(LightningToolkitPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LightningToolkitImpl.wasm(FutureOr<WasmModule> module) =>
      LightningToolkitImpl(module as ExternalLibrary);
  LightningToolkitImpl.raw(this._platform);
  Future<GreenlightCredentials> registerNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint}) {
    var arg0 = api2wire_network(network);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_opt_box_autoadd_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_register_node(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_greenlight_credentials,
      constMeta: kRegisterNodeConstMeta,
      argValues: [network, seed, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_node",
        argNames: ["network", "seed", "config"],
      );

  Future<GreenlightCredentials> recoverNode(
      {required Network network,
      required Uint8List seed,
      Config? config,
      dynamic hint}) {
    var arg0 = api2wire_network(network);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_opt_box_autoadd_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_recover_node(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_greenlight_credentials,
      constMeta: kRecoverNodeConstMeta,
      argValues: [network, seed, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "recover_node",
        argNames: ["network", "seed", "config"],
      );

  Future<void> initNode(
      {Config? config,
      required Uint8List seed,
      required GreenlightCredentials creds,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_config(config);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_box_autoadd_greenlight_credentials(creds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_init_node(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitNodeConstMeta,
      argValues: [config, seed, creds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_node",
        argNames: ["config", "seed", "creds"],
      );

  Stream<BreezEvent> breezEventsStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_events_stream(port_),
      parseSuccessData: _wire2api_breez_event,
      constMeta: kBreezEventsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_events_stream",
        argNames: [],
      );

  Stream<LogEntry> breezLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kBreezLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_log_stream",
        argNames: [],
      );

  Future<void> stopNode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop_node(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopNodeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_node",
        argNames: [],
      );

  Future<void> sendPayment({required String bolt11, dynamic hint}) {
    var arg0 = _platform.api2wire_String(bolt11);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSendPaymentConstMeta,
      argValues: [bolt11],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment",
        argNames: ["bolt11"],
      );

  Future<void> sendSpontaneousPayment(
      {required String nodeId, required int amountSats, dynamic hint}) {
    var arg0 = _platform.api2wire_String(nodeId);
    var arg1 = _platform.api2wire_u64(amountSats);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_send_spontaneous_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSendSpontaneousPaymentConstMeta,
      argValues: [nodeId, amountSats],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_spontaneous_payment",
        argNames: ["nodeId", "amountSats"],
      );

  Future<LNInvoice> receivePayment(
      {required int amountSats, required String description, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amountSats);
    var arg1 = _platform.api2wire_String(description);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_receive_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_ln_invoice,
      constMeta: kReceivePaymentConstMeta,
      argValues: [amountSats, description],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment",
        argNames: ["amountSats", "description"],
      );

  Future<NodeState?> nodeInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_node_info(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_node_state,
      constMeta: kNodeInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "node_info",
        argNames: [],
      );

  Future<List<Payment>> listPayments(
      {required PaymentTypeFilter filter,
      int? fromTimestamp,
      int? toTimestamp,
      dynamic hint}) {
    var arg0 = api2wire_payment_type_filter(filter);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(fromTimestamp);
    var arg2 = _platform.api2wire_opt_box_autoadd_i64(toTimestamp);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_list_payments(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_payment,
      constMeta: kListPaymentsConstMeta,
      argValues: [filter, fromTimestamp, toTimestamp],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments",
        argNames: ["filter", "fromTimestamp", "toTimestamp"],
      );

  Future<List<LspInformation>> listLsps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_lsps(port_),
      parseSuccessData: _wire2api_list_lsp_information,
      constMeta: kListLspsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_lsps",
        argNames: [],
      );

  Future<void> connectLsp({required String lspId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(lspId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_lsp(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectLspConstMeta,
      argValues: [lspId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_lsp",
        argNames: ["lspId"],
      );

  Future<LspInformation> lspInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lsp_info(port_),
      parseSuccessData: _wire2api_lsp_information,
      constMeta: kLspInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLspInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "lsp_info",
        argNames: [],
      );

  Future<List<Rate>> fetchFiatRates({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_fiat_rates(port_),
      parseSuccessData: _wire2api_list_rate,
      constMeta: kFetchFiatRatesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_fiat_rates",
        argNames: [],
      );

  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_fiat_currencies(port_),
      parseSuccessData: _wire2api_list_fiat_currency,
      constMeta: kListFiatCurrenciesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_fiat_currencies",
        argNames: [],
      );

  Future<void> closeLspChannels({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_lsp_channels(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseLspChannelsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "close_lsp_channels",
        argNames: [],
      );

  Future<void> sweep(
      {required String toAddress,
      required FeeratePreset feeratePreset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(toAddress);
    var arg1 = api2wire_feerate_preset(feeratePreset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sweep(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSweepConstMeta,
      argValues: [toAddress, feeratePreset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSweepConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sweep",
        argNames: ["toAddress", "feeratePreset"],
      );

  Future<SwapInfo> receiveOnchain({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_onchain(port_),
      parseSuccessData: _wire2api_swap_info,
      constMeta: kReceiveOnchainConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_onchain",
        argNames: [],
      );

  Future<List<SwapInfo>> listRefundables({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_refundables(port_),
      parseSuccessData: _wire2api_list_swap_info,
      constMeta: kListRefundablesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_refundables",
        argNames: [],
      );

  Future<String> refund(
      {required String swapAddress,
      required String toAddress,
      required int satPerVbyte,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(swapAddress);
    var arg1 = _platform.api2wire_String(toAddress);
    var arg2 = api2wire_u32(satPerVbyte);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_refund(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kRefundConstMeta,
      argValues: [swapAddress, toAddress, satPerVbyte],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "refund",
        argNames: ["swapAddress", "toAddress", "satPerVbyte"],
      );

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_String(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_invoice(port_, arg0),
      parseSuccessData: _wire2api_ln_invoice,
      constMeta: kParseInvoiceConstMeta,
      argValues: [invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_invoice",
        argNames: ["invoice"],
      );

  Future<InputType> parse({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse(port_, arg0),
      parseSuccessData: _wire2api_input_type,
      constMeta: kParseConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse",
        argNames: ["s"],
      );

  Future<LnUrlPayResult> payLnurl(
      {required int userAmountSat,
      String? comment,
      required LnUrlPayRequestData reqData,
      dynamic hint}) {
    var arg0 = _platform.api2wire_u64(userAmountSat);
    var arg1 = _platform.api2wire_opt_String(comment);
    var arg2 = _platform.api2wire_box_autoadd_ln_url_pay_request_data(reqData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pay_lnurl(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_ln_url_pay_result,
      constMeta: kPayLnurlConstMeta,
      argValues: [userAmountSat, comment, reqData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPayLnurlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pay_lnurl",
        argNames: ["userAmountSat", "comment", "reqData"],
      );

  Future<LnUrlWithdrawCallbackStatus> withdrawLnurl(
      {required LnUrlWithdrawRequestData reqData,
      required int amountSats,
      String? description,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_ln_url_withdraw_request_data(reqData);
    var arg1 = _platform.api2wire_u64(amountSats);
    var arg2 = _platform.api2wire_opt_String(description);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_withdraw_lnurl(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_ln_url_withdraw_callback_status,
      constMeta: kWithdrawLnurlConstMeta,
      argValues: [reqData, amountSats, description],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWithdrawLnurlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "withdraw_lnurl",
        argNames: ["reqData", "amountSats", "description"],
      );

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mnemonic_to_seed(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kMnemonicToSeedConstMeta,
      argValues: [phrase],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_to_seed",
        argNames: ["phrase"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  BitcoinAddressData _wire2api_bitcoin_address_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BitcoinAddressData(
      address: _wire2api_String(arr[0]),
      network: _wire2api_network(arr[1]),
      amountSat: _wire2api_opt_box_autoadd_u64(arr[2]),
      label: _wire2api_opt_String(arr[3]),
      message: _wire2api_opt_String(arr[4]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  BitcoinAddressData _wire2api_box_autoadd_bitcoin_address_data(dynamic raw) {
    return _wire2api_bitcoin_address_data(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  InvoicePaidDetails _wire2api_box_autoadd_invoice_paid_details(dynamic raw) {
    return _wire2api_invoice_paid_details(raw);
  }

  LNInvoice _wire2api_box_autoadd_ln_invoice(dynamic raw) {
    return _wire2api_ln_invoice(raw);
  }

  LnUrlAuthRequestData _wire2api_box_autoadd_ln_url_auth_request_data(
      dynamic raw) {
    return _wire2api_ln_url_auth_request_data(raw);
  }

  LnUrlErrorData _wire2api_box_autoadd_ln_url_error_data(dynamic raw) {
    return _wire2api_ln_url_error_data(raw);
  }

  LnUrlPayRequestData _wire2api_box_autoadd_ln_url_pay_request_data(
      dynamic raw) {
    return _wire2api_ln_url_pay_request_data(raw);
  }

  LnUrlWithdrawRequestData _wire2api_box_autoadd_ln_url_withdraw_request_data(
      dynamic raw) {
    return _wire2api_ln_url_withdraw_request_data(raw);
  }

  MessageSuccessActionData _wire2api_box_autoadd_message_success_action_data(
      dynamic raw) {
    return _wire2api_message_success_action_data(raw);
  }

  NodeState _wire2api_box_autoadd_node_state(dynamic raw) {
    return _wire2api_node_state(raw);
  }

  Symbol _wire2api_box_autoadd_symbol(dynamic raw) {
    return _wire2api_symbol(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  UrlSuccessActionData _wire2api_box_autoadd_url_success_action_data(
      dynamic raw) {
    return _wire2api_url_success_action_data(raw);
  }

  BreezEvent _wire2api_breez_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return BreezEvent_NewBlock(
          block: _wire2api_u32(raw[1]),
        );
      case 1:
        return BreezEvent_InvoicePaid(
          details: _wire2api_box_autoadd_invoice_paid_details(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CurrencyInfo _wire2api_currency_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CurrencyInfo(
      name: _wire2api_String(arr[0]),
      fractionSize: _wire2api_u32(arr[1]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[2]),
      symbol: _wire2api_opt_box_autoadd_symbol(arr[3]),
      uniqSymbol: _wire2api_opt_box_autoadd_symbol(arr[4]),
      localizedName: _wire2api_opt_list_localized_name(arr[5]),
      localeOverrides: _wire2api_opt_list_locale_overrides(arr[6]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FiatCurrency _wire2api_fiat_currency(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatCurrency(
      id: _wire2api_String(arr[0]),
      info: _wire2api_currency_info(arr[1]),
    );
  }

  GreenlightCredentials _wire2api_greenlight_credentials(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GreenlightCredentials(
      deviceKey: _wire2api_uint_8_list(arr[0]),
      deviceCert: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  InputType _wire2api_input_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return InputType_BitcoinAddress(
          address: _wire2api_box_autoadd_bitcoin_address_data(raw[1]),
        );
      case 1:
        return InputType_Bolt11(
          invoice: _wire2api_box_autoadd_ln_invoice(raw[1]),
        );
      case 2:
        return InputType_NodeId(
          nodeId: _wire2api_String(raw[1]),
        );
      case 3:
        return InputType_Url(
          url: _wire2api_String(raw[1]),
        );
      case 4:
        return InputType_LnUrlPay(
          data: _wire2api_box_autoadd_ln_url_pay_request_data(raw[1]),
        );
      case 5:
        return InputType_LnUrlWithdraw(
          data: _wire2api_box_autoadd_ln_url_withdraw_request_data(raw[1]),
        );
      case 6:
        return InputType_LnUrlAuth(
          data: _wire2api_box_autoadd_ln_url_auth_request_data(raw[1]),
        );
      case 7:
        return InputType_LnUrlError(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  InvoicePaidDetails _wire2api_invoice_paid_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return InvoicePaidDetails(
      paymentHash: _wire2api_String(arr[0]),
      bolt11: _wire2api_String(arr[1]),
    );
  }

  List<FiatCurrency> _wire2api_list_fiat_currency(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_fiat_currency).toList();
  }

  List<LocaleOverrides> _wire2api_list_locale_overrides(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_locale_overrides).toList();
  }

  List<LocalizedName> _wire2api_list_localized_name(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_localized_name).toList();
  }

  List<LspInformation> _wire2api_list_lsp_information(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_lsp_information).toList();
  }

  List<Payment> _wire2api_list_payment(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_payment).toList();
  }

  List<Rate> _wire2api_list_rate(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_rate).toList();
  }

  List<RouteHint> _wire2api_list_route_hint(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint).toList();
  }

  List<RouteHintHop> _wire2api_list_route_hint_hop(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint_hop).toList();
  }

  List<SwapInfo> _wire2api_list_swap_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_swap_info).toList();
  }

  LNInvoice _wire2api_ln_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return LNInvoice(
      bolt11: _wire2api_String(arr[0]),
      payeePubkey: _wire2api_String(arr[1]),
      paymentHash: _wire2api_String(arr[2]),
      description: _wire2api_opt_String(arr[3]),
      descriptionHash: _wire2api_opt_String(arr[4]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      timestamp: _wire2api_u64(arr[6]),
      expiry: _wire2api_u64(arr[7]),
      routingHints: _wire2api_list_route_hint(arr[8]),
      paymentSecret: _wire2api_uint_8_list(arr[9]),
    );
  }

  LnUrlAuthRequestData _wire2api_ln_url_auth_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnUrlAuthRequestData(
      k1: _wire2api_String(arr[0]),
    );
  }

  LnUrlErrorData _wire2api_ln_url_error_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnUrlErrorData(
      reason: _wire2api_String(arr[0]),
    );
  }

  LnUrlPayRequestData _wire2api_ln_url_pay_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LnUrlPayRequestData(
      callback: _wire2api_String(arr[0]),
      minSendable: _wire2api_u64(arr[1]),
      maxSendable: _wire2api_u64(arr[2]),
      metadataStr: _wire2api_String(arr[3]),
      commentAllowed: _wire2api_usize(arr[4]),
    );
  }

  LnUrlPayResult _wire2api_ln_url_pay_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlPayResult_EndpointSuccess(
          _wire2api_opt_success_action(raw[1]),
        );
      case 1:
        return LnUrlPayResult_EndpointError(
          _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlWithdrawCallbackStatus _wire2api_ln_url_withdraw_callback_status(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlWithdrawCallbackStatus_Ok();
      case 1:
        return LnUrlWithdrawCallbackStatus_Error(
          _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlWithdrawRequestData _wire2api_ln_url_withdraw_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LnUrlWithdrawRequestData(
      callback: _wire2api_String(arr[0]),
      k1: _wire2api_String(arr[1]),
      defaultDescription: _wire2api_String(arr[2]),
      minWithdrawable: _wire2api_u64(arr[3]),
      maxWithdrawable: _wire2api_u64(arr[4]),
    );
  }

  LocaleOverrides _wire2api_locale_overrides(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocaleOverrides(
      locale: _wire2api_String(arr[0]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[1]),
      symbol: _wire2api_symbol(arr[2]),
    );
  }

  LocalizedName _wire2api_localized_name(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedName(
      locale: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(
      line: _wire2api_String(arr[0]),
      level: _wire2api_String(arr[1]),
    );
  }

  LspInformation _wire2api_lsp_information(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return LspInformation(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      widgetUrl: _wire2api_String(arr[2]),
      pubkey: _wire2api_String(arr[3]),
      host: _wire2api_String(arr[4]),
      channelCapacity: _wire2api_i64(arr[5]),
      targetConf: _wire2api_i32(arr[6]),
      baseFeeMsat: _wire2api_i64(arr[7]),
      feeRate: _wire2api_f64(arr[8]),
      timeLockDelta: _wire2api_u32(arr[9]),
      minHtlcMsat: _wire2api_i64(arr[10]),
      channelFeePermyriad: _wire2api_i64(arr[11]),
      lspPubkey: _wire2api_uint_8_list(arr[12]),
      maxInactiveDuration: _wire2api_i64(arr[13]),
      channelMinimumFeeMsat: _wire2api_i64(arr[14]),
    );
  }

  MessageSuccessActionData _wire2api_message_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageSuccessActionData(
      message: _wire2api_String(arr[0]),
    );
  }

  Network _wire2api_network(dynamic raw) {
    return Network.values[raw];
  }

  NodeState _wire2api_node_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return NodeState(
      id: _wire2api_String(arr[0]),
      blockHeight: _wire2api_u32(arr[1]),
      channelsBalanceMsat: _wire2api_u64(arr[2]),
      onchainBalanceMsat: _wire2api_u64(arr[3]),
      maxPayableMsat: _wire2api_u64(arr[4]),
      maxReceivableMsat: _wire2api_u64(arr[5]),
      maxSinglePaymentAmountMsat: _wire2api_u64(arr[6]),
      maxChanReserveMsats: _wire2api_u64(arr[7]),
      connectedPeers: _wire2api_StringList(arr[8]),
      inboundLiquidityMsats: _wire2api_u64(arr[9]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  NodeState? _wire2api_opt_box_autoadd_node_state(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_node_state(raw);
  }

  Symbol? _wire2api_opt_box_autoadd_symbol(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_symbol(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  List<LocaleOverrides>? _wire2api_opt_list_locale_overrides(dynamic raw) {
    return raw == null ? null : _wire2api_list_locale_overrides(raw);
  }

  List<LocalizedName>? _wire2api_opt_list_localized_name(dynamic raw) {
    return raw == null ? null : _wire2api_list_localized_name(raw);
  }

  SuccessAction? _wire2api_opt_success_action(dynamic raw) {
    return raw == null ? null : _wire2api_success_action(raw);
  }

  Payment _wire2api_payment(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return Payment(
      paymentType: _wire2api_String(arr[0]),
      paymentHash: _wire2api_String(arr[1]),
      paymentTime: _wire2api_i64(arr[2]),
      label: _wire2api_String(arr[3]),
      destinationPubkey: _wire2api_String(arr[4]),
      amountMsat: _wire2api_i32(arr[5]),
      feesMsat: _wire2api_i32(arr[6]),
      paymentPreimage: _wire2api_String(arr[7]),
      keysend: _wire2api_bool(arr[8]),
      bolt11: _wire2api_String(arr[9]),
      pending: _wire2api_bool(arr[10]),
      description: _wire2api_opt_String(arr[11]),
    );
  }

  Rate _wire2api_rate(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Rate(
      coin: _wire2api_String(arr[0]),
      value: _wire2api_f64(arr[1]),
    );
  }

  RouteHint _wire2api_route_hint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RouteHint(
      hops: _wire2api_list_route_hint_hop(arr[0]),
    );
  }

  RouteHintHop _wire2api_route_hint_hop(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return RouteHintHop(
      srcNodeId: _wire2api_String(arr[0]),
      shortChannelId: _wire2api_u64(arr[1]),
      feesBaseMsat: _wire2api_u32(arr[2]),
      feesProportionalMillionths: _wire2api_u32(arr[3]),
      cltvExpiryDelta: _wire2api_u64(arr[4]),
      htlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      htlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
    );
  }

  SuccessAction _wire2api_success_action(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SuccessAction_Message(
          _wire2api_box_autoadd_message_success_action_data(raw[1]),
        );
      case 1:
        return SuccessAction_Url(
          _wire2api_box_autoadd_url_success_action_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SwapInfo _wire2api_swap_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return SwapInfo(
      bitcoinAddress: _wire2api_String(arr[0]),
      createdAt: _wire2api_i64(arr[1]),
      lockHeight: _wire2api_i64(arr[2]),
      paymentHash: _wire2api_uint_8_list(arr[3]),
      preimage: _wire2api_uint_8_list(arr[4]),
      privateKey: _wire2api_uint_8_list(arr[5]),
      publicKey: _wire2api_uint_8_list(arr[6]),
      swapperPublicKey: _wire2api_uint_8_list(arr[7]),
      script: _wire2api_uint_8_list(arr[8]),
      bolt11: _wire2api_opt_String(arr[9]),
      paidSats: _wire2api_u32(arr[10]),
      confirmedSats: _wire2api_u32(arr[11]),
      status: _wire2api_swap_status(arr[12]),
    );
  }

  SwapStatus _wire2api_swap_status(dynamic raw) {
    return SwapStatus.values[raw];
  }

  Symbol _wire2api_symbol(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Symbol(
      grapheme: _wire2api_opt_String(arr[0]),
      template: _wire2api_opt_String(arr[1]),
      rtl: _wire2api_opt_box_autoadd_bool(arr[2]),
      position: _wire2api_opt_box_autoadd_u32(arr[3]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UrlSuccessActionData _wire2api_url_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UrlSuccessActionData(
      description: _wire2api_String(arr[0]),
      url: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_feerate_preset(FeeratePreset raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_type_filter(PaymentTypeFilter raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class LightningToolkitPlatform
    extends FlutterRustBridgeBase<LightningToolkitWire> {
  LightningToolkitPlatform(ffi.DynamicLibrary dylib)
      : super(LightningToolkitWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials>
      api2wire_box_autoadd_greenlight_credentials(GreenlightCredentials raw) {
    final ptr = inner.new_box_autoadd_greenlight_credentials_0();
    _api_fill_to_wire_greenlight_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_LnUrlPayRequestData>
      api2wire_box_autoadd_ln_url_pay_request_data(LnUrlPayRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_pay_request_data_0();
    _api_fill_to_wire_ln_url_pay_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlWithdrawRequestData>
      api2wire_box_autoadd_ln_url_withdraw_request_data(
          LnUrlWithdrawRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_withdraw_request_data_0();
    _api_fill_to_wire_ln_url_withdraw_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_opt_box_autoadd_config(Config? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_config(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials apiObj,
      ffi.Pointer<wire_GreenlightCredentials> wireObj) {
    _api_fill_to_wire_greenlight_credentials(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj,
      ffi.Pointer<wire_LnUrlPayRequestData> wireObj) {
    _api_fill_to_wire_ln_url_pay_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj,
      ffi.Pointer<wire_LnUrlWithdrawRequestData> wireObj) {
    _api_fill_to_wire_ln_url_withdraw_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.breezserver = api2wire_String(apiObj.breezserver);
    wireObj.mempoolspace_url = api2wire_String(apiObj.mempoolspaceUrl);
    wireObj.working_dir = api2wire_String(apiObj.workingDir);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.payment_timeout_sec = api2wire_u32(apiObj.paymentTimeoutSec);
    wireObj.default_lsp_id = api2wire_opt_String(apiObj.defaultLspId);
  }

  void _api_fill_to_wire_greenlight_credentials(
      GreenlightCredentials apiObj, wire_GreenlightCredentials wireObj) {
    wireObj.device_key = api2wire_uint_8_list(apiObj.deviceKey);
    wireObj.device_cert = api2wire_uint_8_list(apiObj.deviceCert);
  }

  void _api_fill_to_wire_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, wire_LnUrlPayRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.min_sendable = api2wire_u64(apiObj.minSendable);
    wireObj.max_sendable = api2wire_u64(apiObj.maxSendable);
    wireObj.metadata_str = api2wire_String(apiObj.metadataStr);
    wireObj.comment_allowed = api2wire_usize(apiObj.commentAllowed);
  }

  void _api_fill_to_wire_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, wire_LnUrlWithdrawRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.k1 = api2wire_String(apiObj.k1);
    wireObj.default_description = api2wire_String(apiObj.defaultDescription);
    wireObj.min_withdrawable = api2wire_u64(apiObj.minWithdrawable);
    wireObj.max_withdrawable = api2wire_u64(apiObj.maxWithdrawable);
  }

  void _api_fill_to_wire_opt_box_autoadd_config(
      Config? apiObj, ffi.Pointer<wire_Config> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_config(apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LightningToolkitWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningToolkitWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningToolkitWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_register_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
  ) {
    return _wire_register_node(
      port_,
      network,
      seed,
      config,
    );
  }

  late final _wire_register_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_register_node');
  late final _wire_register_node = _wire_register_nodePtr.asFunction<
      void Function(
          int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_recover_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
  ) {
    return _wire_recover_node(
      port_,
      network,
      seed,
      config,
    );
  }

  late final _wire_recover_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_recover_node');
  late final _wire_recover_node = _wire_recover_nodePtr.asFunction<
      void Function(
          int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_init_node(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_GreenlightCredentials> creds,
  ) {
    return _wire_init_node(
      port_,
      config,
      seed,
      creds,
    );
  }

  late final _wire_init_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_GreenlightCredentials>)>>('wire_init_node');
  late final _wire_init_node = _wire_init_nodePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Config>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_GreenlightCredentials>)>();

  void wire_breez_events_stream(
    int port_,
  ) {
    return _wire_breez_events_stream(
      port_,
    );
  }

  late final _wire_breez_events_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_breez_events_stream');
  late final _wire_breez_events_stream =
      _wire_breez_events_streamPtr.asFunction<void Function(int)>();

  void wire_breez_log_stream(
    int port_,
  ) {
    return _wire_breez_log_stream(
      port_,
    );
  }

  late final _wire_breez_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_breez_log_stream');
  late final _wire_breez_log_stream =
      _wire_breez_log_streamPtr.asFunction<void Function(int)>();

  void wire_stop_node(
    int port_,
  ) {
    return _wire_stop_node(
      port_,
    );
  }

  late final _wire_stop_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_node');
  late final _wire_stop_node =
      _wire_stop_nodePtr.asFunction<void Function(int)>();

  void wire_send_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> bolt11,
  ) {
    return _wire_send_payment(
      port_,
      bolt11,
    );
  }

  late final _wire_send_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_send_payment');
  late final _wire_send_payment = _wire_send_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> node_id,
    int amount_sats,
  ) {
    return _wire_send_spontaneous_payment(
      port_,
      node_id,
      amount_sats,
    );
  }

  late final _wire_send_spontaneous_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_send_spontaneous_payment');
  late final _wire_send_spontaneous_payment = _wire_send_spontaneous_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_payment(
    int port_,
    int amount_sats,
    ffi.Pointer<wire_uint_8_list> description,
  ) {
    return _wire_receive_payment(
      port_,
      amount_sats,
      description,
    );
  }

  late final _wire_receive_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_receive_payment');
  late final _wire_receive_payment = _wire_receive_paymentPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_node_info(
    int port_,
  ) {
    return _wire_node_info(
      port_,
    );
  }

  late final _wire_node_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_node_info');
  late final _wire_node_info =
      _wire_node_infoPtr.asFunction<void Function(int)>();

  void wire_list_payments(
    int port_,
    int filter,
    ffi.Pointer<ffi.Int64> from_timestamp,
    ffi.Pointer<ffi.Int64> to_timestamp,
  ) {
    return _wire_list_payments(
      port_,
      filter,
      from_timestamp,
      to_timestamp,
    );
  }

  late final _wire_list_paymentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('wire_list_payments');
  late final _wire_list_payments = _wire_list_paymentsPtr.asFunction<
      void Function(
          int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  void wire_list_lsps(
    int port_,
  ) {
    return _wire_list_lsps(
      port_,
    );
  }

  late final _wire_list_lspsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_lsps');
  late final _wire_list_lsps =
      _wire_list_lspsPtr.asFunction<void Function(int)>();

  void wire_connect_lsp(
    int port_,
    ffi.Pointer<wire_uint_8_list> lsp_id,
  ) {
    return _wire_connect_lsp(
      port_,
      lsp_id,
    );
  }

  late final _wire_connect_lspPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_connect_lsp');
  late final _wire_connect_lsp = _wire_connect_lspPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lsp_info(
    int port_,
  ) {
    return _wire_lsp_info(
      port_,
    );
  }

  late final _wire_lsp_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_lsp_info');
  late final _wire_lsp_info =
      _wire_lsp_infoPtr.asFunction<void Function(int)>();

  void wire_fetch_fiat_rates(
    int port_,
  ) {
    return _wire_fetch_fiat_rates(
      port_,
    );
  }

  late final _wire_fetch_fiat_ratesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_fetch_fiat_rates');
  late final _wire_fetch_fiat_rates =
      _wire_fetch_fiat_ratesPtr.asFunction<void Function(int)>();

  void wire_list_fiat_currencies(
    int port_,
  ) {
    return _wire_list_fiat_currencies(
      port_,
    );
  }

  late final _wire_list_fiat_currenciesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_fiat_currencies');
  late final _wire_list_fiat_currencies =
      _wire_list_fiat_currenciesPtr.asFunction<void Function(int)>();

  void wire_close_lsp_channels(
    int port_,
  ) {
    return _wire_close_lsp_channels(
      port_,
    );
  }

  late final _wire_close_lsp_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_close_lsp_channels');
  late final _wire_close_lsp_channels =
      _wire_close_lsp_channelsPtr.asFunction<void Function(int)>();

  void wire_sweep(
    int port_,
    ffi.Pointer<wire_uint_8_list> to_address,
    int feerate_preset,
  ) {
    return _wire_sweep(
      port_,
      to_address,
      feerate_preset,
    );
  }

  late final _wire_sweepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_sweep');
  late final _wire_sweep = _wire_sweepPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_onchain(
    int port_,
  ) {
    return _wire_receive_onchain(
      port_,
    );
  }

  late final _wire_receive_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_receive_onchain');
  late final _wire_receive_onchain =
      _wire_receive_onchainPtr.asFunction<void Function(int)>();

  void wire_list_refundables(
    int port_,
  ) {
    return _wire_list_refundables(
      port_,
    );
  }

  late final _wire_list_refundablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_refundables');
  late final _wire_list_refundables =
      _wire_list_refundablesPtr.asFunction<void Function(int)>();

  void wire_refund(
    int port_,
    ffi.Pointer<wire_uint_8_list> swap_address,
    ffi.Pointer<wire_uint_8_list> to_address,
    int sat_per_vbyte,
  ) {
    return _wire_refund(
      port_,
      swap_address,
      to_address,
      sat_per_vbyte,
    );
  }

  late final _wire_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Uint32)>>('wire_refund');
  late final _wire_refund = _wire_refundPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse_invoice');
  late final _wire_parse_invoice = _wire_parse_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_parse(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_parse(
      port_,
      s,
    );
  }

  late final _wire_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse');
  late final _wire_parse = _wire_parsePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pay_lnurl(
    int port_,
    int user_amount_sat,
    ffi.Pointer<wire_uint_8_list> comment,
    ffi.Pointer<wire_LnUrlPayRequestData> req_data,
  ) {
    return _wire_pay_lnurl(
      port_,
      user_amount_sat,
      comment,
      req_data,
    );
  }

  late final _wire_pay_lnurlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_LnUrlPayRequestData>)>>('wire_pay_lnurl');
  late final _wire_pay_lnurl = _wire_pay_lnurlPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_LnUrlPayRequestData>)>();

  void wire_withdraw_lnurl(
    int port_,
    ffi.Pointer<wire_LnUrlWithdrawRequestData> req_data,
    int amount_sats,
    ffi.Pointer<wire_uint_8_list> description,
  ) {
    return _wire_withdraw_lnurl(
      port_,
      req_data,
      amount_sats,
      description,
    );
  }

  late final _wire_withdraw_lnurlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_LnUrlWithdrawRequestData>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_withdraw_lnurl');
  late final _wire_withdraw_lnurl = _wire_withdraw_lnurlPtr.asFunction<
      void Function(int, ffi.Pointer<wire_LnUrlWithdrawRequestData>, int,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire_mnemonic_to_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_mnemonic_to_seed');
  late final _wire_mnemonic_to_seed = _wire_mnemonic_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_GreenlightCredentials>
      new_box_autoadd_greenlight_credentials_0() {
    return _new_box_autoadd_greenlight_credentials_0();
  }

  late final _new_box_autoadd_greenlight_credentials_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_GreenlightCredentials>
              Function()>>('new_box_autoadd_greenlight_credentials_0');
  late final _new_box_autoadd_greenlight_credentials_0 =
      _new_box_autoadd_greenlight_credentials_0Ptr
          .asFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_LnUrlPayRequestData>
      new_box_autoadd_ln_url_pay_request_data_0() {
    return _new_box_autoadd_ln_url_pay_request_data_0();
  }

  late final _new_box_autoadd_ln_url_pay_request_data_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_LnUrlPayRequestData> Function()>>(
      'new_box_autoadd_ln_url_pay_request_data_0');
  late final _new_box_autoadd_ln_url_pay_request_data_0 =
      _new_box_autoadd_ln_url_pay_request_data_0Ptr
          .asFunction<ffi.Pointer<wire_LnUrlPayRequestData> Function()>();

  ffi.Pointer<wire_LnUrlWithdrawRequestData>
      new_box_autoadd_ln_url_withdraw_request_data_0() {
    return _new_box_autoadd_ln_url_withdraw_request_data_0();
  }

  late final _new_box_autoadd_ln_url_withdraw_request_data_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_LnUrlWithdrawRequestData>
              Function()>>('new_box_autoadd_ln_url_withdraw_request_data_0');
  late final _new_box_autoadd_ln_url_withdraw_request_data_0 =
      _new_box_autoadd_ln_url_withdraw_request_data_0Ptr
          .asFunction<ffi.Pointer<wire_LnUrlWithdrawRequestData> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> breezserver;

  external ffi.Pointer<wire_uint_8_list> mempoolspace_url;

  external ffi.Pointer<wire_uint_8_list> working_dir;

  @ffi.Int32()
  external int network;

  @ffi.Uint32()
  external int payment_timeout_sec;

  external ffi.Pointer<wire_uint_8_list> default_lsp_id;
}

class wire_GreenlightCredentials extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_key;

  external ffi.Pointer<wire_uint_8_list> device_cert;
}

class wire_LnUrlPayRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  @ffi.Uint64()
  external int min_sendable;

  @ffi.Uint64()
  external int max_sendable;

  external ffi.Pointer<wire_uint_8_list> metadata_str;

  @uintptr_t()
  external int comment_allowed;
}

typedef uintptr_t = ffi.UnsignedLong;

class wire_LnUrlWithdrawRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  external ffi.Pointer<wire_uint_8_list> k1;

  external ffi.Pointer<wire_uint_8_list> default_description;

  @ffi.Uint64()
  external int min_withdrawable;

  @ffi.Uint64()
  external int max_withdrawable;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
